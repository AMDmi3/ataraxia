From 8180bdab9b812ca424724a325071861c8dbf30ca Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Wed, 1 Apr 2020 21:18:09 +0900
Subject: [PATCH] libgo: fix build on musl

Thanks to Adelie Linux!

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 libgo/go/runtime/mem_gccgo.go     |  4 ++--
 libgo/go/runtime/signal_gccgo.go  |  2 +-
 libgo/go/syscall/errstr.go        |  1 -
 libgo/go/syscall/errstr_glibc.go  | 33 -------------------------------
 libgo/go/syscall/libcall_linux.go | 16 +++++++--------
 libgo/mksigtab.sh                 |  5 +++--
 libgo/mksysinfo.sh                |  6 +-----
 libgo/runtime/go-signal.c         |  8 ++++++--
 libgo/runtime/runtime.h           | 22 +++++++++++++++++++++
 libgo/sysinfo.c                   |  3 ---
 10 files changed, 43 insertions(+), 57 deletions(-)
 delete mode 100644 libgo/go/syscall/errstr_glibc.go

diff --git a/libgo/go/runtime/mem_gccgo.go b/libgo/go/runtime/mem_gccgo.go
index 987467814..57f6c4720 100644
--- a/libgo/go/runtime/mem_gccgo.go
+++ b/libgo/go/runtime/mem_gccgo.go
@@ -16,7 +16,7 @@ import (
 //go:linkname sysFree runtime.sysFree
 
 //extern mmap
-func sysMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uintptr) unsafe.Pointer
+func sysMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off int64) unsafe.Pointer
 
 //extern munmap
 func munmap(addr unsafe.Pointer, length uintptr) int32
@@ -38,7 +38,7 @@ func init() {
 	}
 }
 
-func mmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uintptr) (unsafe.Pointer, int) {
+func mmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off int64) (unsafe.Pointer, int) {
 	p := sysMmap(addr, n, prot, flags, fd, off)
 	if uintptr(p) == _MAP_FAILED {
 		return nil, errno()
diff --git a/libgo/go/runtime/signal_gccgo.go b/libgo/go/runtime/signal_gccgo.go
index b3c78f68c..4e4805e4d 100644
--- a/libgo/go/runtime/signal_gccgo.go
+++ b/libgo/go/runtime/signal_gccgo.go
@@ -111,7 +111,7 @@ func getsig(i uint32) uintptr {
 	if sigaction(i, nil, &sa) < 0 {
 		// On GNU/Linux glibc rejects attempts to call
 		// sigaction with signal 32 (SIGCANCEL) or 33 (SIGSETXID).
-		if GOOS == "linux" && (i == 32 || i == 33) {
+		if GOOS == "linux" && (i == 32 || i == 33 || i == 34) {
 			return _SIG_DFL
 		}
 		throw("sigaction read failure")
diff --git a/libgo/go/syscall/errstr.go b/libgo/go/syscall/errstr.go
index 6c2441d36..8f7c55381 100644
--- a/libgo/go/syscall/errstr.go
+++ b/libgo/go/syscall/errstr.go
@@ -5,7 +5,6 @@
 // license that can be found in the LICENSE file.
 
 // +build !hurd
-// +build !linux
 
 package syscall
 
diff --git a/libgo/go/syscall/errstr_glibc.go b/libgo/go/syscall/errstr_glibc.go
deleted file mode 100644
index 5b19e6f20..000000000
--- a/libgo/go/syscall/errstr_glibc.go
+++ /dev/null
@@ -1,33 +0,0 @@
-// errstr_glibc.go -- GNU/Linux and GNU/Hurd specific error strings.
-
-// Copyright 2010 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-// We use this rather than errstr.go because on GNU/Linux sterror_r
-// returns a pointer to the error message, and may not use buf at all.
-
-// +build hurd linux
-
-package syscall
-
-import "unsafe"
-
-//sysnb	strerror_r(errnum int, b []byte) (errstr *byte)
-//strerror_r(errnum _C_int, b *byte, len Size_t) *byte
-
-func Errstr(errnum int) string {
-	a := make([]byte, 128)
-	p := strerror_r(errnum, a)
-	b := (*[1000]byte)(unsafe.Pointer(p))
-	i := 0
-	for b[i] != 0 {
-		i++
-	}
-	// Lowercase first letter: Bad -> bad, but STREAM -> STREAM.
-	if i > 1 && 'A' <= b[0] && b[0] <= 'Z' && 'a' <= b[1] && b[1] <= 'z' {
-		c := b[0] + 'a' - 'A'
-		return string(c) + string(b[1:i])
-	}
-	return string(b[:i])
-}
diff --git a/libgo/go/syscall/libcall_linux.go b/libgo/go/syscall/libcall_linux.go
index 88286c07b..f8f5cfb50 100644
--- a/libgo/go/syscall/libcall_linux.go
+++ b/libgo/go/syscall/libcall_linux.go
@@ -206,19 +206,19 @@ func Gettid() (tid int) {
 //sys	Setxattr(path string, attr string, data []byte, flags int) (err error)
 //setxattr(path *byte, name *byte, value *byte, size Size_t, flags _C_int) _C_int
 
-//sys	splice(rfd int, roff *_loff_t, wfd int, woff *_loff_t, len int, flags int) (n int64, err error)
-//splice(rfd _C_int, roff *_loff_t, wfd _C_int, woff *_loff_t, len Size_t, flags _C_uint) Ssize_t
+//sys	splice(rfd int, roff *_off_t, wfd int, woff *_off_t, len int, flags int) (n int64, err error)
+//splice(rfd _C_int, roff *_off_t, wfd _C_int, woff *_off_t, len Size_t, flags _C_uint) Ssize_t
 func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error) {
-	var lroff _loff_t
-	var plroff *_loff_t
+	var lroff _off_t
+	var plroff *_off_t
 	if roff != nil {
-		lroff = _loff_t(*roff)
+		lroff = _off_t(*roff)
 		plroff = &lroff
 	}
-	var lwoff _loff_t
-	var plwoff *_loff_t
+	var lwoff _off_t
+	var plwoff *_off_t
 	if woff != nil {
-		lwoff = _loff_t(*woff)
+		lwoff = _off_t(*woff)
 		plwoff = &lwoff
 	}
 	n, err = splice(rfd, plroff, wfd, plwoff, len, flags)
diff --git a/libgo/mksigtab.sh b/libgo/mksigtab.sh
index 11e4ec436..3010220da 100644
--- a/libgo/mksigtab.sh
+++ b/libgo/mksigtab.sh
@@ -82,7 +82,6 @@ checksig _SIGPWR     '{_SigNotify, "SIGPWR: power failure restart"}'
 checksig _SIGEMT     '{_SigThrow, "SIGEMT: emulate instruction executed"}'
 checksig _SIGINFO    '{_SigNotify, "SIGINFO: status request from keyboard"}'
 checksig _SIGTHR     '{_SigNotify, "SIGTHR: reserved"}'
-checksig _SIGPOLL    '{_SigNotify, "SIGPOLL: pollable event occurred"}'
 checksig _SIGWAITING '{_SigNotify, "SIGWAITING: reserved signal no longer used by"}'
 checksig _SIGLWP     '{_SigNotify, "SIGLWP: reserved signal no longer used by"}'
 checksig _SIGFREEZE  '{_SigNotify, "SIGFREEZE: special signal used by CPR"}'
@@ -95,10 +94,12 @@ checksig _SIGLOST '   {_SigNotify, "SIGLOST: resource lost (Sun); server died (G
 
 # Special handling of signals 32 and 33 on GNU/Linux systems,
 # because they are special to glibc.
+# Signal 34 is additionally special to Linux systems with musl.
 if test "${GOOS}" = "linux"; then
-    SIGLIST=$SIGLIST"_32__33_"
+    SIGLIST=$SIGLIST"_32__33__34_"
     echo '	32: {_SigSetStack + _SigUnblock, "signal 32"}, /* SIGCANCEL; see issue 6997 */'
     echo '	33: {_SigSetStack + _SigUnblock, "signal 33"}, /* SIGSETXID; see issues 3871, 9400, 12498 */'
+    echo '	34: {_SigSetStack + _SigUnblock, "signal 34"}, /* see issue 30062 */'
 fi
 
 if test "${GOOS}" = "aix"; then
diff --git a/libgo/mksysinfo.sh b/libgo/mksysinfo.sh
index f086c507e..15103cfea 100755
--- a/libgo/mksysinfo.sh
+++ b/libgo/mksysinfo.sh
@@ -379,11 +379,7 @@ fi
 # Some basic types.
 echo 'type Size_t _size_t' >> ${OUT}
 echo "type Ssize_t _ssize_t" >> ${OUT}
-if grep '^const _HAVE_OFF64_T = ' gen-sysinfo.go > /dev/null 2>&1; then
-  echo "type Offset_t _off64_t" >> ${OUT}
-else
-  echo "type Offset_t _off_t" >> ${OUT}
-fi
+echo "type Offset_t _off_t" >> ${OUT}
 echo "type Mode_t _mode_t" >> ${OUT}
 echo "type Pid_t _pid_t" >> ${OUT}
 echo "type Uid_t _uid_t" >> ${OUT}
diff --git a/libgo/runtime/go-signal.c b/libgo/runtime/go-signal.c
index 081604e18..0106f7221 100644
--- a/libgo/runtime/go-signal.c
+++ b/libgo/runtime/go-signal.c
@@ -222,7 +222,11 @@ getSiginfo(siginfo_t *info, void *context __attribute__((unused)))
 #endif
 #ifdef __PPC__
   #ifdef __linux__
-	ret.sigpc = ((ucontext_t*)(context))->uc_mcontext.regs->nip;
+    #ifdef __PPC64__
+	ret.sigpc = ((ucontext_t*)(context))->uc_mcontext.gp_regs[32];
+    #else
+	ret.sigpc = ((ucontext_t*)(context))->uc_mcontext.gregs[32];
+    #endif
   #endif
   #ifdef _AIX
 	ret.sigpc = ((ucontext_t*)(context))->uc_mcontext.jmp_context.iar;
@@ -343,7 +347,7 @@ dumpregs(siginfo_t *info __attribute__((unused)), void *context __attribute__((u
   #endif
 #endif
 
-#if defined(__PPC__) && defined(__LITTLE_ENDIAN__)
+#if defined(__PPC__) && defined(__LITTLE_ENDIAN__) && defined(__GLIBC__)
   #ifdef __linux__
 	  {
 		mcontext_t *m = &((ucontext_t*)(context))->uc_mcontext;
diff --git a/libgo/runtime/runtime.h b/libgo/runtime/runtime.h
index 97b1f114c..f67390c74 100644
--- a/libgo/runtime/runtime.h
+++ b/libgo/runtime/runtime.h
@@ -177,6 +177,28 @@ enum {
 
 extern bool runtime_copystack;
 
+#ifdef __linux__
+#if !defined(__GLIBC__) || !defined(__UCLIBC__)
+
+#define getcontext _getcontext
+#define makecontext _makecontext
+#define setcontext _setcontext
+#define swapcontext _swapcontext
+
+static int _getcontext() {
+}
+
+static void _makecontext() {
+}
+
+static int _setcontext() {
+}
+
+static int _swapcontext() {
+}
+#endif
+#endif
+
 /*
  * defined macros
  *    you need super-gopher-guru privilege
diff --git a/libgo/sysinfo.c b/libgo/sysinfo.c
index 4ab798c49..3d9f5fcc7 100644
--- a/libgo/sysinfo.c
+++ b/libgo/sysinfo.c
@@ -73,9 +73,6 @@
 #include <sys/times.h>
 #include <sys/wait.h>
 #include <sys/un.h>
-#if defined(HAVE_SYS_USER_H)
-#include <sys/user.h>
-#endif
 #if defined(HAVE_SYS_UTSNAME_H)
 #include <sys/utsname.h>
 #endif
-- 
2.25.1

From 5efcc1161c1d6d6eb3f05f88439178e1d569144f Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Wed, 1 Apr 2020 22:07:25 +0900
Subject: [PATCH] libgo: remove sys/sysinfo.h include

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 libgo/sysinfo.c | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/libgo/sysinfo.c b/libgo/sysinfo.c
index 3d9f5fcc7..d971e767f 100644
--- a/libgo/sysinfo.c
+++ b/libgo/sysinfo.c
@@ -138,9 +138,6 @@
 #if defined(HAVE_SYS_TIMEX_H)
 #include <sys/timex.h>
 #endif
-#if defined(HAVE_SYS_SYSINFO_H)
-#include <sys/sysinfo.h>
-#endif
 #if defined(HAVE_UTIME_H)
 #include <utime.h>
 #endif
-- 
2.25.1

