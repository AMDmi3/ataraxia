diff -ruN mozjs-68.4.2/build/moz.configure/init.configure mozjs-68.4.2-patch/build/moz.configure/init.configure
--- mozjs-68.4.2/build/moz.configure/init.configure	2020-01-18 00:45:45.000000000 +0900
+++ mozjs-68.4.2-patch/build/moz.configure/init.configure	2020-04-04 03:52:48.783890424 +0900
@@ -70,7 +70,7 @@
     # Check for CRLF line endings.
     with open(os.path.join(topsrcdir, 'configure.py'), 'rb') as fh:
         data = fh.read()
-        if '\r' in data:
+        if b'\r' in data:
             die('\n ***\n'
                 ' * The source tree appears to have Windows-style line endings.\n'
                 ' *\n'
@@ -293,7 +293,7 @@
     def early_options():
         return set(
             option.env
-            for option in __sandbox__._options.itervalues()
+            for option in __sandbox__._options.values()
             if option.env
         )
     return early_options
@@ -331,15 +331,15 @@
                 log.info('  %s' % arg)
                 helper.add(arg, origin='mozconfig', args=helper._args)
 
-        for key, value in mozconfig['env']['added'].iteritems():
+        for key, value in mozconfig['env']['added'].items():
             add(key, value)
             os.environ[key] = value
-        for key, (_, value) in mozconfig['env']['modified'].iteritems():
+        for key, (_, value) in mozconfig['env']['modified'].items():
             add(key, value)
             os.environ[key] = value
-        for key, value in mozconfig['vars']['added'].iteritems():
+        for key, value in mozconfig['vars']['added'].items():
             add(key, value)
-        for key, (_, value) in mozconfig['vars']['modified'].iteritems():
+        for key, (_, value) in mozconfig['vars']['modified'].items():
             add(key, value)
 
 
diff -ruN mozjs-68.4.2/build/moz.configure/toolchain.configure mozjs-68.4.2-patch/build/moz.configure/toolchain.configure
--- mozjs-68.4.2/build/moz.configure/toolchain.configure	2020-01-18 00:45:45.000000000 +0900
+++ mozjs-68.4.2-patch/build/moz.configure/toolchain.configure	2020-04-04 03:49:01.830869572 +0900
@@ -450,7 +450,7 @@
         ('KERNEL', kernel_preprocessor_checks),
         ('OS', OS_preprocessor_checks),
     ):
-        for n, (value, condition) in enumerate(preprocessor_checks.iteritems()):
+        for n, (value, condition) in enumerate(preprocessor_checks.items()):
             check += dedent('''\
                 #%(if)s %(condition)s
                 %%%(name)s "%(value)s"
diff -ruN mozjs-68.4.2/build/moz.configure/util.configure mozjs-68.4.2-patch/build/moz.configure/util.configure
--- mozjs-68.4.2/build/moz.configure/util.configure	2020-01-18 00:45:45.000000000 +0900
+++ mozjs-68.4.2-patch/build/moz.configure/util.configure	2020-04-04 03:49:02.013869588 +0900
@@ -32,11 +32,11 @@
     # deal with this.
     if 'env' in kwargs:
         normalized_env = {}
-        for k, v in kwargs['env'].items():
-            if isinstance(k, unicode):
+        for k, v in list(kwargs['env'].items()):
+            if isinstance(k, str):
                 k = k.encode('utf-8', 'strict')
 
-            if isinstance(v, unicode):
+            if isinstance(v, str):
                 v = v.encode('utf-8', 'strict')
 
             normalized_env[k] = v
diff -ruN mozjs-68.4.2/js/src/builtin/embedjs.py mozjs-68.4.2-patch/js/src/builtin/embedjs.py
--- mozjs-68.4.2/js/src/builtin/embedjs.py	2020-01-18 00:45:53.000000000 +0900
+++ mozjs-68.4.2-patch/js/src/builtin/embedjs.py	2020-04-04 03:49:02.435869627 +0900
@@ -36,7 +36,7 @@
 #
 # It uses the C preprocessor to process its inputs.
 
-from __future__ import with_statement
+
 import re
 import sys
 import os
@@ -122,7 +122,7 @@
 
     with open(tmpIn, 'wb') as input:
         input.write(source)
-    print(' '.join(cxx + outputArg + args + [tmpIn]))
+    print((' '.join(cxx + outputArg + args + [tmpIn])))
     result = subprocess.Popen(cxx + outputArg + args + [tmpIn]).wait()
     if (result != 0):
         sys.exit(result)
diff -ruN mozjs-68.4.2/js/src/frontend/GenerateReservedWords.py mozjs-68.4.2-patch/js/src/frontend/GenerateReservedWords.py
--- mozjs-68.4.2/js/src/frontend/GenerateReservedWords.py	2020-01-18 00:45:53.000000000 +0900
+++ mozjs-68.4.2-patch/js/src/frontend/GenerateReservedWords.py	2020-04-04 03:49:02.529869636 +0900
@@ -87,7 +87,7 @@
         per_column = column_dict.setdefault(word[column], [])
         per_column.append(item)
 
-    return sorted(column_dict.items(), key=lambda (char, word): ord(char))
+    return sorted(list(column_dict.items()), key=lambda char_word: ord(char_word[0]))
 
 
 def generate_letter_switch(opt, unprocessed_columns, reserved_word_list,
@@ -95,7 +95,7 @@
     assert(len(reserved_word_list) != 0)
 
     if not columns:
-        columns = range(0, unprocessed_columns)
+        columns = list(range(0, unprocessed_columns))
 
     if len(reserved_word_list) == 1:
         index, word = reserved_word_list[0]
@@ -170,7 +170,7 @@
         per_length = length_dict.setdefault(len(word), [])
         per_length.append(item)
 
-    return sorted(length_dict.items(), key=lambda (length, word): length)
+    return sorted(list(length_dict.items()), key=lambda length_word: length_word[0])
 
 
 def generate_switch(opt, reserved_word_list):
diff -ruN mozjs-68.4.2/js/src/gc/GenerateStatsPhases.py mozjs-68.4.2-patch/js/src/gc/GenerateStatsPhases.py
--- mozjs-68.4.2/js/src/gc/GenerateStatsPhases.py	2020-01-18 00:45:58.000000000 +0900
+++ mozjs-68.4.2-patch/js/src/gc/GenerateStatsPhases.py	2020-04-04 03:49:02.658869648 +0900
@@ -276,7 +276,7 @@
     #
     # Generate PhaseKind enum.
     #
-    phaseKindNames = map(lambda phaseKind: phaseKind.name, AllPhaseKinds)
+    phaseKindNames = [phaseKind.name for phaseKind in AllPhaseKinds]
     extraPhaseKinds = [
         "NONE = LIMIT",
         "EXPLICIT_SUSPENSION = LIMIT",
@@ -288,7 +288,7 @@
     #
     # Generate Phase enum.
     #
-    phaseNames = map(lambda phase: phase.name, AllPhases)
+    phaseNames = [phase.name for phase in AllPhases]
     extraPhases = [
         "NONE = LIMIT",
         "EXPLICIT_SUSPENSION = LIMIT",
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/action/check_binary.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/action/check_binary.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/action/check_binary.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/action/check_binary.py	2020-04-04 03:49:02.882869668 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import print_function, unicode_literals
+
 
 import argparse
 import os
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/action/process_define_files.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/action/process_define_files.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/action/process_define_files.py	2020-01-18 00:46:20.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/action/process_define_files.py	2020-04-04 03:49:02.949869674 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import argparse
 import os
@@ -63,7 +63,7 @@
                             return define
                         defines = '\n'.join(sorted(
                             define_for_name(name, val)
-                            for name, val in config.defines['ALLDEFINES'].iteritems()))
+                            for name, val in config.defines['ALLDEFINES'].items()))
                         l = l[:m.start('cmd') - 1] \
                             + defines + l[m.end('name'):]
                     elif cmd == 'define':
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/backend/base.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/base.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/backend/base.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/base.py	2020-04-04 03:49:03.129869691 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
+
 
 from abc import (
     ABCMeta,
@@ -31,7 +31,7 @@
 from mozbuild.base import ExecutionSummary
 
 
-class BuildBackend(LoggingMixin):
+class BuildBackend(LoggingMixin, metaclass=ABCMeta):
     """Abstract base class for build backends.
 
     A build backend is merely a consumer of the build configuration (the output
@@ -39,8 +39,6 @@
     is the discretion of the specific implementation.
     """
 
-    __metaclass__ = ABCMeta
-
     def __init__(self, environment):
         assert isinstance(environment, (ConfigEnvironment, EmptyConfig))
         self.populate_logger()
@@ -311,7 +309,7 @@
         srcdir = mozpath.dirname(obj.input_path)
         pp.context.update({
             k: ' '.join(v) if isinstance(v, list) else v
-            for k, v in obj.config.substs.iteritems()
+            for k, v in obj.config.substs.items()
         })
         pp.context.update(
             top_srcdir=obj.topsrcdir,
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/backend/common.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/common.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/backend/common.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/common.py	2020-04-04 03:49:03.421869718 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
+
 
 import itertools
 import json
@@ -100,7 +100,7 @@
 
         The stem of an IDL file is the basename of the file with no .idl extension.
         """
-        return itertools.chain(*[m.stems() for m in self.modules.itervalues()])
+        return itertools.chain(*[m.stems() for m in self.modules.values()])
 
 class BinariesCollection(object):
     """Tracks state of binaries produced by the build."""
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/backend/configenvironment.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/configenvironment.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/backend/configenvironment.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/configenvironment.py	2020-04-04 03:49:03.604869735 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import
+
 
 import os
 import sys
@@ -22,7 +22,7 @@
 
 
 if sys.version_info.major == 2:
-    text_type = unicode
+    text_type = str
 else:
     text_type = str
 
@@ -187,7 +187,7 @@
                 except UnicodeDecodeError:
                     return v.decode('utf-8', 'replace')
 
-        for k, v in self.substs.items():
+        for k, v in list(self.substs.items()):
             if not isinstance(v, StringTypes):
                 if isinstance(v, Iterable):
                     type(v)(decode(i) for i in v)
@@ -258,7 +258,7 @@
         existing_files = self._load_config_track()
 
         new_files = set()
-        for k, v in values.iteritems():
+        for k, v in values.items():
             new_files.add(self._write_file(k, v))
 
         for filename in existing_files - new_files:
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/backend/configenvironment.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/configenvironment.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/backend/fastermake.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/fastermake.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/backend/fastermake.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/fastermake.py	2020-04-04 03:49:03.801869753 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals, print_function
+
 
 from mozbuild.backend.base import PartialBackend
 from mozbuild.backend.common import CommonBackend
@@ -173,12 +173,12 @@
             if value is not None:
                 mk.add_statement('%s = %s' % (var, value))
 
-        install_manifests_bases = self._install_manifests.keys()
+        install_manifests_bases = list(self._install_manifests.keys())
 
         # Add information for chrome manifest generation
         manifest_targets = []
 
-        for target, entries in self._manifest_entries.iteritems():
+        for target, entries in self._manifest_entries.items():
             manifest_targets.append(target)
             install_target = mozpath.basedir(target, install_manifests_bases)
             self._install_manifests[install_target].add_content(
@@ -187,10 +187,10 @@
 
         # Add information for install manifests.
         mk.add_statement('INSTALL_MANIFESTS = %s'
-                         % ' '.join(self._install_manifests.keys()))
+                         % ' '.join(list(self._install_manifests.keys())))
 
         # Add dependencies we inferred:
-        for target, deps in self._dependencies.iteritems():
+        for target, deps in self._dependencies.items():
             mk.create_rule([target]).add_dependencies(
                 '$(TOPOBJDIR)/%s' % d for d in deps)
 
@@ -202,7 +202,7 @@
             '$(TOPSRCDIR)/third_party/python/compare-locales/compare_locales/paths.py',
         ]
         # Add l10n dependencies we inferred:
-        for target, deps in self._l10n_dependencies.iteritems():
+        for target, deps in self._l10n_dependencies.items():
             mk.create_rule([target]).add_dependencies(
                 '%s' % d[0] for d in deps)
             for (merge, ref_file, l10n_file) in deps:
@@ -214,7 +214,7 @@
 
         mk.add_statement('include $(TOPSRCDIR)/config/faster/rules.mk')
 
-        for base, install_manifest in self._install_manifests.iteritems():
+        for base, install_manifest in self._install_manifests.items():
             with self._write_file(
                     mozpath.join(self.environment.topobjdir, 'faster',
                                  'install_%s' % base.replace('/', '_'))) as fh:
@@ -223,7 +223,7 @@
         # For artifact builds only, write a single unified manifest for consumption by |mach watch|.
         if self.environment.is_artifact_build:
             unified_manifest = InstallManifest()
-            for base, install_manifest in self._install_manifests.iteritems():
+            for base, install_manifest in self._install_manifests.items():
                 # Expect 'dist/bin/**', which includes 'dist/bin' with no trailing slash.
                 assert base.startswith('dist/bin')
                 base = base[len('dist/bin'):]
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/backend/__init__.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/__init__.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/backend/recursivemake.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/recursivemake.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/backend/recursivemake.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/backend/recursivemake.py	2020-04-04 03:49:04.838869848 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
+
 
 import logging
 import os
@@ -12,7 +12,7 @@
     defaultdict,
     namedtuple,
 )
-from StringIO import StringIO
+from io import StringIO
 from itertools import chain
 
 from mozpack.manifests import (
@@ -81,6 +81,7 @@
 )
 from ..makeutil import Makefile
 from mozbuild.shellutil import quote as shell_quote
+from functools import reduce
 
 MOZBUILD_VARIABLES = [
     b'ASFLAGS',
@@ -209,7 +210,7 @@
         self.fh.write(buf)
 
     def write_once(self, buf):
-        if isinstance(buf, unicode):
+        if isinstance(buf, str):
             buf = buf.encode('utf-8')
         if b'\n' + buf not in self.fh.getvalue():
             self.write(buf)
@@ -282,7 +283,7 @@
         Helper function to call a filter from compute_dependencies and
         traverse.
         """
-        return filter(current, self.get_subdirs(current))
+        return list(filter(current, self.get_subdirs(current)))
 
     def compute_dependencies(self, filter=None):
         """
@@ -736,7 +737,7 @@
         convenience variables, and the other dependency definitions for a
         hopefully proper directory traversal.
         """
-        for tier, no_skip in self._no_skip.items():
+        for tier, no_skip in list(self._no_skip.items()):
             self.log(logging.DEBUG, 'fill_root_mk', {
                 'number': len(no_skip), 'tier': tier
                 }, 'Using {number} directories during {tier}')
@@ -783,7 +784,7 @@
         for tier, filter in filters:
             main, all_deps = \
                 self._traversal.compute_dependencies(filter)
-            for dir, deps in all_deps.items():
+            for dir, deps in list(all_deps.items()):
                 if deps is not None or (dir in self._idl_dirs \
                                         and tier == 'export'):
                     rule = root_deps_mk.create_rule(['%s/%s' % (dir, tier)])
@@ -796,7 +797,7 @@
                 rule.add_dependencies('%s/%s' % (d, tier) for d in main)
 
         all_compile_deps = reduce(lambda x,y: x|y,
-            self._compile_graph.values()) if self._compile_graph else set()
+            list(self._compile_graph.values())) if self._compile_graph else set()
         # Include the following as dependencies of the top recursion target for
         # compilation:
         # - nodes that are not dependended upon by anything. Typically, this
@@ -809,7 +810,7 @@
         #   as direct dependencies of the top recursion target, to somehow
         #   prioritize them.
         #   1. See bug 1262241 comment 5.
-        compile_roots = [t for t, deps in self._compile_graph.iteritems()
+        compile_roots = [t for t, deps in self._compile_graph.items()
                          if not deps or t not in all_compile_deps]
 
         def add_category_rules(category, roots, graph):
@@ -837,7 +838,7 @@
                 non_default_graphs[target_name][root] = self._compile_graph[root]
                 del self._compile_graph[root]
 
-        for root in chain(*non_default_roots.values()):
+        for root in chain(*list(non_default_roots.values())):
             compile_roots.remove(root)
             dirname = mozpath.dirname(root)
             # If a directory only contains non-default compile targets, we don't
@@ -847,7 +848,7 @@
                 self._no_skip['syms'].remove(dirname)
 
         add_category_rules('compile', compile_roots, self._compile_graph)
-        for category, graph in non_default_graphs.iteritems():
+        for category, graph in non_default_graphs.items():
             add_category_rules(category, non_default_roots[category], graph)
 
         root_mk = Makefile()
@@ -867,9 +868,9 @@
         root_mk.add_statement('non_default_tiers := %s' % ' '.join(sorted(
             non_default_roots.keys())))
 
-        for category, graphs in non_default_graphs.iteritems():
+        for category, graphs in non_default_graphs.items():
             category_dirs = [mozpath.dirname(target)
-                             for target in graphs.keys()]
+                             for target in list(graphs.keys())]
             root_mk.add_statement('%s_dirs := %s' % (category,
                                                      ' '.join(category_dirs)))
 
@@ -999,7 +1000,7 @@
         self._fill_root_mk()
 
         # Make the master test manifest files.
-        for flavor, t in self._test_manifests.items():
+        for flavor, t in list(self._test_manifests.items()):
             install_prefix, manifests = t
             manifest_stem = mozpath.join(install_prefix, '%s.ini' % flavor)
             self._write_master_test_manifest(mozpath.join(
@@ -1241,7 +1242,7 @@
         # Don't allow files to be defined multiple times unless it is allowed.
         # We currently allow duplicates for non-test files or test files if
         # the manifest is listed as a duplicate.
-        for source, (dest, is_test) in obj.installs.items():
+        for source, (dest, is_test) in list(obj.installs.items()):
             try:
                 self._install_manifests['_test_files'].add_link(source, dest)
             except ValueError:
@@ -1653,7 +1654,7 @@
         man_dir = mozpath.join(self.environment.topobjdir, '_build_manifests',
             dest)
 
-        for k, manifest in manifests.items():
+        for k, manifest in list(manifests.items()):
             with self._write_file(mozpath.join(man_dir, k)) as fh:
                 manifest.write(fileobj=fh)
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/config_status.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/config_status.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/config_status.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/config_status.py	2020-04-04 03:49:04.938869857 +0900
@@ -6,7 +6,7 @@
 # drop-in replacement for autoconf 2.13's config.status, with features
 # borrowed from autoconf > 2.5, and additional features.
 
-from __future__ import absolute_import, print_function
+
 
 import logging
 import os
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/configure/check_debug_ranges.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/check_debug_ranges.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/configure/check_debug_ranges.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/check_debug_ranges.py	2020-04-04 03:49:05.533869912 +0900
@@ -6,7 +6,7 @@
 # to a given compilation unit. This is used as a helper to find a bug in some
 # versions of GNU ld.
 
-from __future__ import absolute_import
+
 
 import subprocess
 import sys
@@ -59,4 +59,4 @@
 
 
 if __name__ == '__main__':
-    print(main(*sys.argv[1:]))
+    print((main(*sys.argv[1:])))
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/configure/help.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/help.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/configure/__init__.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/__init__.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/configure/__init__.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/__init__.py	2020-04-04 03:54:24.940899259 +0900
@@ -2,9 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
-
-import __builtin__
+import builtins
 import inspect
 import logging
 import os
@@ -91,14 +89,14 @@
     def __ge__(self, other):
         raise ConfigureError('Cannot compare @depends functions.')
 
-    def __nonzero__(self):
+    def __bool__(self):
         raise ConfigureError('Cannot use @depends functions in '
                              'e.g. conditionals.')
 
     def __getattr__(self, key):
         return self._getattr(key).sandboxed
 
-    def __nonzero__(self):
+    def __bool__(self):
         raise ConfigureError(
             'Cannot do boolean operations on @depends functions.')
 
@@ -280,11 +278,11 @@
     # The default set of builtins. We expose unicode as str to make sandboxed
     # files more python3-ready.
     BUILTINS = ReadOnlyDict({
-        b: getattr(__builtin__, b)
+        b: getattr(builtins, b)
         for b in ('None', 'False', 'True', 'int', 'bool', 'any', 'all', 'len',
                   'list', 'tuple', 'set', 'dict', 'isinstance', 'getattr',
                   'hasattr', 'enumerate', 'range', 'zip', 'AssertionError')
-    }, __import__=forbidden_import, str=unicode)
+    }, __import__=forbidden_import, str=str)
 
     # Expose a limited set of functions from os.path
     OS = ReadOnlyNamespace(path=ReadOnlyNamespace(**{
@@ -430,7 +428,7 @@
         if path:
             self.include_file(path)
 
-        for option in self._options.itervalues():
+        for option in self._options.values():
             # All options must be referenced by some @depends function
             if option not in self._seen:
                 raise ConfigureError(
@@ -596,7 +594,7 @@
         return value
 
     def _dependency(self, arg, callee_name, arg_name=None):
-        if isinstance(arg, types.StringTypes):
+        if isinstance(arg, (str,)):
             prefix, name, values = Option.split_option(arg)
             if values != ():
                 raise ConfigureError("Option must not contain an '='")
@@ -660,7 +658,7 @@
         '''
         when = self._normalize_when(kwargs.get('when'), 'option')
         args = [self._resolve(arg) for arg in args]
-        kwargs = {k: self._resolve(v) for k, v in kwargs.iteritems()
+        kwargs = {k: self._resolve(v) for k, v in kwargs.items()
                                       if k != 'when'}
         option = Option(*args, **kwargs)
         if when:
@@ -740,7 +738,7 @@
         with self.only_when_impl(when):
             what = self._resolve(what)
             if what:
-                if not isinstance(what, types.StringTypes):
+                if not isinstance(what, (str,)):
                     raise TypeError("Unexpected type: '%s'" % type(what).__name__)
                 self.include_file(what)
 
@@ -758,7 +756,7 @@
                 (k[:-len('_impl')], getattr(self, k))
                 for k in dir(self) if k.endswith('_impl') and k != 'template_impl'
             )
-            glob.update((k, v) for k, v in self.iteritems() if k not in glob)
+            glob.update((k, v) for k, v in self.items() if k not in glob)
 
         template = self._prepare_function(func, update_globals)
 
@@ -783,7 +781,7 @@
             def wrapper(*args, **kwargs):
                 args = [maybe_prepare_function(arg) for arg in args]
                 kwargs = {k: maybe_prepare_function(v)
-                          for k, v in kwargs.iteritems()}
+                          for k, v in kwargs.items()}
                 ret = template(*args, **kwargs)
                 if isfunction(ret):
                     # We can't expect the sandboxed code to think about all the
@@ -818,7 +816,7 @@
         for value, required in (
                 (_import, True), (_from, False), (_as, False)):
 
-            if not isinstance(value, types.StringTypes) and (
+            if not isinstance(value, (str,)) and (
                     required or value is not None):
                 raise TypeError("Unexpected type: '%s'" % type(value).__name__)
             if value is not None and not self.RE_MODULE.match(value):
@@ -883,7 +881,7 @@
         # Special case for the open() builtin, because otherwise, using it
         # fails with "IOError: file() constructor not accessible in
         # restricted mode"
-        if what == '__builtin__.open':
+        if what == 'builtins.open':
             return lambda *args, **kwargs: open(*args, **kwargs)
         # Special case os and os.environ so that os.environ is our copy of
         # the environment.
@@ -917,7 +915,7 @@
         name = self._resolve(name)
         if name is None:
             return
-        if not isinstance(name, types.StringTypes):
+        if not isinstance(name, (str,)):
             raise TypeError("Unexpected type: '%s'" % type(name).__name__)
         if name in data:
             raise ConfigureError(
@@ -1015,7 +1013,7 @@
                 if isinstance(possible_reasons[0], Option):
                     reason = possible_reasons[0]
         if not reason and (isinstance(value, (bool, tuple)) or
-                           isinstance(value, types.StringTypes)):
+                           isinstance(value, (str,))):
             # A reason can be provided automatically when imply_option
             # is called with an immediate value.
             _, filename, line, _, _, _ = inspect.stack()[1]
@@ -1051,7 +1049,7 @@
             return func
 
         glob = SandboxedGlobal(
-            (k, v) for k, v in func.func_globals.iteritems()
+            (k, v) for k, v in func.__globals__.items()
             if (inspect.isfunction(v) and v not in self._templates) or (
                 inspect.isclass(v) and issubclass(v, Exception))
         )
@@ -1074,20 +1072,20 @@
         # Note this is not entirely bullet proof (if the value is e.g. a list,
         # the list contents could have changed), but covers the bases.
         closure = None
-        if func.func_closure:
+        if func.__closure__:
             def makecell(content):
                 def f():
                     content
-                return f.func_closure[0]
+                return f.__closure__[0]
 
             closure = tuple(makecell(cell.cell_contents)
-                            for cell in func.func_closure)
+                            for cell in func.__closure__)
 
         new_func = self.wraps(func)(types.FunctionType(
-            func.func_code,
+            func.__code__,
             glob,
             func.__name__,
-            func.func_defaults,
+            func.__defaults__,
             closure
         ))
         @self.wraps(new_func)
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/configure/__init__.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/__init__.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/configure/options.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/options.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/configure/options.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/options.py	2020-04-04 03:49:05.850869941 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import os
 import sys
@@ -12,7 +12,7 @@
 
 def istupleofstrings(obj):
     return isinstance(obj, tuple) and len(obj) and all(
-        isinstance(o, types.StringTypes) for o in obj)
+        isinstance(o, (str,)) for o in obj)
 
 
 class OptionValue(tuple):
@@ -92,7 +92,7 @@
             return PositiveOptionValue()
         elif value is False or value == ():
             return NegativeOptionValue()
-        elif isinstance(value, types.StringTypes):
+        elif isinstance(value, (str,)):
             return PositiveOptionValue((value,))
         elif isinstance(value, tuple):
             return PositiveOptionValue(value)
@@ -106,7 +106,7 @@
     in the form of a tuple for when values are given to the option (in the form
     --option=value[,value2...].
     '''
-    def __nonzero__(self):
+    def __bool__(self):
         return True
 
 
@@ -131,7 +131,7 @@
         if format_data:
             message = message.format(**format_data)
         super(ConflictingOptionError, self).__init__(message)
-        for k, v in format_data.iteritems():
+        for k, v in format_data.items():
             setattr(self, k, v)
 
 
@@ -167,7 +167,7 @@
                 'At least an option name or an environment variable name must '
                 'be given')
         if name:
-            if not isinstance(name, types.StringTypes):
+            if not isinstance(name, (str,)):
                 raise InvalidOptionError('Option must be a string')
             if not name.startswith('--'):
                 raise InvalidOptionError('Option must start with `--`')
@@ -176,7 +176,7 @@
             if not name.islower():
                 raise InvalidOptionError('Option must be all lowercase')
         if env:
-            if not isinstance(env, types.StringTypes):
+            if not isinstance(env, (str,)):
                 raise InvalidOptionError(
                     'Environment variable name must be a string')
             if not env.isupper():
@@ -186,8 +186,8 @@
                 isinstance(nargs, int) and nargs >= 0):
             raise InvalidOptionError(
                 "nargs must be a positive integer, '?', '*' or '+'")
-        if (not isinstance(default, types.StringTypes) and
-                not isinstance(default, (bool, types.NoneType)) and
+        if (not isinstance(default, (str,)) and
+                not isinstance(default, (bool, type(None))) and
                 not istupleofstrings(default)):
             raise InvalidOptionError(
                 'default must be a bool, a string or a tuple of strings')
@@ -259,7 +259,7 @@
                     ', '.join("'%s'" % c for c in choices))
         elif has_choices:
             maxargs = self.maxargs
-            if len(choices) < maxargs and maxargs != sys.maxint:
+            if len(choices) < maxargs and maxargs != sys.maxsize:
                 raise InvalidOptionError('Not enough `choices` for `nargs`')
         self.choices = choices
         self.help = help
@@ -273,7 +273,7 @@
         where prefix is one of 'with', 'without', 'enable' or 'disable'.
         The '=values' part is optional. Values are separated with commas.
         '''
-        if not isinstance(option, types.StringTypes):
+        if not isinstance(option, (str,)):
             raise InvalidOptionError('Option must be a string')
 
         elements = option.split('=', 1)
@@ -326,7 +326,7 @@
     def maxargs(self):
         if isinstance(self.nargs, int):
             return self.nargs
-        return 1 if self.nargs == '?' else sys.maxint
+        return 1 if self.nargs == '?' else sys.maxsize
 
     def _validate_nargs(self, num):
         minargs, maxargs = self.minargs, self.maxargs
@@ -516,5 +516,5 @@
 
     def __iter__(self):
         for d in (self._args, self._extra_args):
-            for arg, pos in d.itervalues():
+            for arg, pos in d.values():
                 yield arg
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/configure/options.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/options.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/configure/util.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/util.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/configure/util.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/util.py	2020-04-04 03:49:05.970869952 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import codecs
 import itertools
@@ -51,7 +51,7 @@
 
     def __cmp__(self, other):
         # LooseVersion checks isinstance(StringType), so work around it.
-        if isinstance(other, unicode):
+        if isinstance(other, str):
             other = other.encode('ascii')
         return LooseVersion.__cmp__(self, other)
 
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/configure/util.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/configure/util.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/controller/building.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/controller/building.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/controller/building.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/controller/building.py	2020-04-04 03:49:06.665870016 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
+
 
 import errno
 import getpass
@@ -156,7 +156,7 @@
         """
         o = []
 
-        for tier, state in self.tiers.items():
+        for tier, state in list(self.tiers.items()):
             t_entry = dict(
                 name=tier,
                 start=state['begin_time'],
@@ -593,7 +593,7 @@
 
     def __init__(self, terminal, monitor):
         Footer.__init__(self, terminal)
-        self.tiers = monitor.tiers.tier_status.viewitems()
+        self.tiers = monitor.tiers.tier_status.items()
 
     def draw(self):
         """Draws this footer in the terminal."""
@@ -959,8 +959,8 @@
 
         return '\n'.join(lines)
 
-    def __nonzero__(self):
-        relative_values = [v for k, v in self._values.items()
+    def __bool__(self):
+        relative_values = [v for k, v in list(self._values.items())
                            if k not in self.ABSOLUTE_KEYS]
         return (all(v >= 0 for v in relative_values) and
                 any(v > 0 for v in relative_values))
@@ -1248,7 +1248,7 @@
 
         high_finder, finder_percent = monitor.have_high_finder_usage()
         if high_finder:
-            print(FINDER_SLOW_MESSAGE % finder_percent)
+            print((FINDER_SLOW_MESSAGE % finder_percent))
 
         ccache_end = monitor.ccache_stats()
 
@@ -1340,8 +1340,8 @@
         """Install test files."""
 
         if self.is_clobber_needed():
-            print(INSTALL_TESTS_CLOBBER.format(
-                  clobber_file=os.path.join(self.topobjdir, 'CLOBBER')))
+            print((INSTALL_TESTS_CLOBBER.format(
+                  clobber_file=os.path.join(self.topobjdir, 'CLOBBER'))))
             sys.exit(1)
 
         install_test_files(mozpath.normpath(self.topsrcdir), self.topobjdir,
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/frontend/context.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/context.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/frontend/context.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/context.py	2020-04-04 03:49:07.521870095 +0900
@@ -14,7 +14,7 @@
 contain, you've come to the right place.
 """
 
-from __future__ import absolute_import, unicode_literals
+
 
 import os
 
@@ -236,15 +236,15 @@
         This function is transactional: if setitem fails for one of the values,
         the context is not updated at all."""
         if isinstance(iterable, dict):
-            iterable = iterable.items()
+            iterable = list(iterable.items())
 
         update = {}
-        for key, value in itertools.chain(iterable, kwargs.items()):
+        for key, value in itertools.chain(iterable, list(kwargs.items())):
             stored_type = self._validate(key, value)
             # Don't create an instance of stored_type if coercion is needed,
             # until all values are validated.
             update[key] = (value, stored_type)
-        for key, (value, stored_type) in update.items():
+        for key, (value, stored_type) in list(update.items()):
             if not isinstance(value, stored_type):
                 update[key] = stored_type(value)
             else:
@@ -310,7 +310,7 @@
         # a template were set and which were provided as defaults.
         template_name = getattr(context, 'template', None)
         if template_name in (None, 'Gyp'):
-            dict.__init__(self, ((k, v if v is None else TypedList(unicode)(v))
+            dict.__init__(self, ((k, v if v is None else TypedList(str)(v))
                                  for k, v, _ in self.flag_variables))
         else:
             dict.__init__(self)
@@ -506,13 +506,13 @@
         if key in self and self[key] is None:
             raise ValueError('`%s` may not be set in COMPILE_FLAGS from moz.build, this '
                              'value is resolved from the emitter.' % key)
-        if not (isinstance(value, list) and all(isinstance(v, basestring) for v in value)):
+        if not (isinstance(value, list) and all(isinstance(v, str) for v in value)):
             raise ValueError('A list of strings must be provided as a value for a '
                              'compile flags category.')
         dict.__setitem__(self, key, value)
 
 
-class FinalTargetValue(ContextDerivedValue, unicode):
+class FinalTargetValue(ContextDerivedValue, str):
     def __new__(cls, context, value=""):
         if not value:
             value = 'dist/'
@@ -522,7 +522,7 @@
                 value += 'bin'
             if context['DIST_SUBDIR']:
                 value += '/' + context['DIST_SUBDIR']
-        return unicode.__new__(cls, value)
+        return str.__new__(cls, value)
 
 
 def Enum(*values):
@@ -570,7 +570,7 @@
                 cls = SourcePath
         return super(PathMeta, cls).__call__(context, value)
 
-class Path(ContextDerivedValue, unicode):
+class Path(ContextDerivedValue, str, metaclass=PathMeta):
     """Stores and resolves a source path relative to a given context
 
     This class is used as a backing type for some of the sandbox variables.
@@ -581,7 +581,6 @@
       - '!objdir/relative/paths'
       - '%/filesystem/absolute/paths'
     """
-    __metaclass__ = PathMeta
 
     def __new__(cls, context, value=None):
         return super(Path, cls).__new__(cls, value)
@@ -601,7 +600,7 @@
     def __cmp__(self, other):
         if isinstance(other, Path) and self.srcdir != other.srcdir:
             return cmp(self.full_path, other.full_path)
-        return cmp(unicode(self), other)
+        return cmp(str(self), other)
 
     # __cmp__ is not enough because unicode has __eq__, __ne__, etc. defined
     # and __cmp__ is only used for those when they don't exist.
@@ -759,7 +758,7 @@
         __slots__ = tuple([name for name, _ in fields])
 
         def __init__(self, context):
-            for fname, ftype in self._fields.items():
+            for fname, ftype in list(self._fields.items()):
                 if issubclass(ftype, ContextDerivedValue):
                     setattr(self, fname, self._fields[fname](context))
                 else:
@@ -900,18 +899,18 @@
 OrderedSourceList = ContextDerivedTypedList(SourcePath, StrictOrderingOnAppendList)
 OrderedTestFlavorList = TypedList(Enum(*all_test_flavors()),
                                   StrictOrderingOnAppendList)
-OrderedStringList = TypedList(unicode, StrictOrderingOnAppendList)
+OrderedStringList = TypedList(str, StrictOrderingOnAppendList)
 DependentTestsEntry = ContextDerivedTypedRecord(('files', OrderedSourceList),
                                                 ('tags', OrderedStringList),
                                                 ('flavors', OrderedTestFlavorList))
 BugzillaComponent = TypedNamedTuple('BugzillaComponent',
-                        [('product', unicode), ('component', unicode)])
+                        [('product', str), ('component', str)])
 SchedulingComponents = ContextDerivedTypedRecord(
-        ('inclusive', TypedList(unicode, StrictOrderingOnAppendList)),
-        ('exclusive', TypedList(unicode, StrictOrderingOnAppendList)))
+        ('inclusive', TypedList(str, StrictOrderingOnAppendList)),
+        ('exclusive', TypedList(str, StrictOrderingOnAppendList)))
 
 GeneratedFilesList = StrictOrderingOnAppendListWithFlagsFactory({
-    'script': unicode,
+    'script': str,
     'inputs': list,
     'force': bool,
     'flags': list, })
@@ -1079,7 +1078,7 @@
         self.test_tags |= other.test_tags
         self.test_flavors |= other.test_flavors
 
-        for k, v in other.items():
+        for k, v in list(other.items()):
             if k == 'IMPACTED_TESTS':
                 self.test_files |= set(mozpath.relpath(e.full_path, e.context.config.topsrcdir)
                                        for e in v.files)
@@ -1137,7 +1136,7 @@
 
         bug_components = Counter()
 
-        for f in files.values():
+        for f in list(files.values()):
             bug_component = f.get('BUG_COMPONENT')
             if bug_component:
                 bug_components[bug_component] += 1
@@ -1215,7 +1214,7 @@
         RustLibrary template instead.
         """),
 
-    'RUST_LIBRARY_TARGET_DIR': (unicode, unicode,
+    'RUST_LIBRARY_TARGET_DIR': (str, str,
         """Where CARGO_TARGET_DIR should point when compiling this library.  If
         not set, it defaults to the current objdir.  It should be a relative path
         to the current objdir; absolute paths should not be used.
@@ -1231,11 +1230,11 @@
         HostRustLibrary template instead.
         """),
 
-    'RUST_TESTS': (TypedList(unicode), list,
+    'RUST_TESTS': (TypedList(str), list,
         """Names of Rust tests to build and run via `cargo test`.
         """),
 
-    'RUST_TEST_FEATURES': (TypedList(unicode), list,
+    'RUST_TEST_FEATURES': (TypedList(str), list,
         """Cargo features to activate for RUST_TESTS.
         """),
 
@@ -1469,7 +1468,7 @@
         """Like ``OBJDIR_FILES``, with preprocessing. Use sparingly.
         """),
 
-    'FINAL_LIBRARY': (unicode, unicode,
+    'FINAL_LIBRARY': (str, str,
         """Library in which the objects of the current directory will be linked.
 
         This variable contains the name of a library, defined elsewhere with
@@ -1510,7 +1509,7 @@
         with the host compiler.
         """),
 
-    'HOST_LIBRARY_NAME': (unicode, unicode,
+    'HOST_LIBRARY_NAME': (str, str,
         """Name of target library generated when cross compiling.
         """),
 
@@ -1521,7 +1520,7 @@
         libraries that link into this library via FINAL_LIBRARY.
         """),
 
-    'LIBRARY_NAME': (unicode, unicode,
+    'LIBRARY_NAME': (str, str,
         """The code name of the library generated for a directory.
 
         By default STATIC_LIBRARY_NAME and SHARED_LIBRARY_NAME take this name.
@@ -1533,20 +1532,20 @@
         ``example/components/xpcomsample.lib`` on Windows.
         """),
 
-    'SHARED_LIBRARY_NAME': (unicode, unicode,
+    'SHARED_LIBRARY_NAME': (str, str,
         """The name of the static library generated for a directory, if it needs to
         differ from the library code name.
 
         Implies FORCE_SHARED_LIB.
         """),
 
-    'SHARED_LIBRARY_OUTPUT_CATEGORY': (unicode, unicode,
+    'SHARED_LIBRARY_OUTPUT_CATEGORY': (str, str,
         """The output category for this context's shared library. If set this will
         correspond to the build command that will build this shared library, and
         the library will not be built as part of the default build.
         """),
 
-    'RUST_LIBRARY_OUTPUT_CATEGORY': (unicode, unicode,
+    'RUST_LIBRARY_OUTPUT_CATEGORY': (str, str,
         """The output category for this context's rust library. If set this will
         correspond to the build command that will build this rust library, and
         the library will not be built as part of the default build.
@@ -1559,7 +1558,7 @@
         Implies FORCE_SHARED_LIB.
         """),
 
-    'STATIC_LIBRARY_NAME': (unicode, unicode,
+    'STATIC_LIBRARY_NAME': (str, str,
         """The name of the static library generated for a directory, if it needs to
         differ from the library code name.
 
@@ -1591,31 +1590,31 @@
 
         This variable contains a list of system libaries to link against.
         """),
-    'RCFILE': (unicode, unicode,
+    'RCFILE': (str, str,
         """The program .rc file.
 
         This variable can only be used on Windows.
         """),
 
-    'RESFILE': (unicode, unicode,
+    'RESFILE': (str, str,
         """The program .res file.
 
         This variable can only be used on Windows.
         """),
 
-    'RCINCLUDE': (unicode, unicode,
+    'RCINCLUDE': (str, str,
         """The resource script file to be included in the default .res file.
 
         This variable can only be used on Windows.
         """),
 
-    'DEFFILE': (Path, unicode,
+    'DEFFILE': (Path, str,
         """The program .def (module definition) file.
 
         This variable can only be used on Windows.
         """),
 
-    'SYMBOLS_FILE': (Path, unicode,
+    'SYMBOLS_FILE': (Path, str,
         """A file containing a list of symbols to export from a shared library.
 
         The given file contains a list of symbols to be exported, and is
@@ -1636,7 +1635,7 @@
         ``BIN_SUFFIX``, the name will remain unchanged.
         """),
 
-    'SONAME': (unicode, unicode,
+    'SONAME': (str, str,
         """The soname of the shared object currently being linked
 
         soname is the "logical name" of a shared object, often used to provide
@@ -1706,7 +1705,7 @@
         ``GENERATED_FILES``.
         """),
 
-    'PROGRAM' : (unicode, unicode,
+    'PROGRAM' : (str, str,
         """Compiled executable name.
 
         If the configuration token ``BIN_SUFFIX`` is set, its value will be
@@ -1714,7 +1713,7 @@
         ``BIN_SUFFIX``, ``PROGRAM`` will remain unchanged.
         """),
 
-    'HOST_PROGRAM' : (unicode, unicode,
+    'HOST_PROGRAM' : (str, str,
         """Compiled host executable name.
 
         If the configuration token ``HOST_BIN_SUFFIX`` is set, its value will be
@@ -1752,7 +1751,7 @@
         files.
         """),
 
-    'XPIDL_MODULE': (unicode, unicode,
+    'XPIDL_MODULE': (str, str,
         """XPCOM Interface Definition Module Name.
 
         This is the name of the ``.xpt`` file that is created by linking
@@ -1910,14 +1909,14 @@
 
 
     # The following variables are used to control the target of installed files.
-    'XPI_NAME': (unicode, unicode,
+    'XPI_NAME': (str, str,
         """The name of an extension XPI to generate.
 
         When this variable is present, the results of this directory will end up
         being packaged into an extension instead of the main dist/bin results.
         """),
 
-    'DIST_SUBDIR': (unicode, unicode,
+    'DIST_SUBDIR': (str, str,
         """The name of an alternate directory to install files to.
 
         When this variable is present, the results of this directory will end up
@@ -1925,7 +1924,7 @@
         otherwise be placed.
         """),
 
-    'FINAL_TARGET': (FinalTargetValue, unicode,
+    'FINAL_TARGET': (FinalTargetValue, str,
         """The name of the directory to install targets to.
 
         The directory is relative to the top of the object directory. The
@@ -1945,7 +1944,7 @@
 
     'GYP_DIRS': (StrictOrderingOnAppendListWithFlagsFactory({
             'variables': dict,
-            'input': unicode,
+            'input': str,
             'sandbox_vars': dict,
             'no_chromium': bool,
             'no_unified': bool,
@@ -1990,7 +1989,7 @@
             'sandbox_vars': dict,
             'non_unified_sources': StrictOrderingOnAppendList,
             'mozilla_flags': list,
-            'gn_target': unicode,
+            'gn_target': str,
         }), list,
         """List of dirs containing gn files describing targets to build. Attributes:
             - variables, a dictionary containing variables and values to pass
@@ -2190,7 +2189,7 @@
 }
 
 # Sanity check: we don't want any variable above to have a list as storage type.
-for name, (storage_type, input_types, docs) in VARIABLES.items():
+for name, (storage_type, input_types, docs) in list(VARIABLES.items()):
     if storage_type == list:
         raise RuntimeError('%s has a "list" storage type. Use "List" instead.'
             % name)
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/frontend/data.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/data.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/frontend/data.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/data.py	2020-04-04 03:49:08.041870142 +0900
@@ -15,7 +15,7 @@
 structures.
 """
 
-from __future__ import absolute_import, unicode_literals
+
 
 from mozbuild.frontend.context import (
     ObjDirPath,
@@ -190,7 +190,7 @@
             if value:
                 for dest_var in dest_vars:
                     flags[dest_var].extend(value)
-        return flags.items()
+        return list(flags.items())
 
 class XPIDLModule(ContextDerived):
     """Describes an XPIDL module to be compiled."""
@@ -218,7 +218,7 @@
         self.defines = defines
 
     def get_defines(self):
-        for define, value in self.defines.iteritems():
+        for define, value in self.defines.items():
             if value is True:
                 yield('-D%s' % define)
             elif value is False:
@@ -547,7 +547,7 @@
     KIND = 'target'
 
     def source_files(self):
-        for srcs in self.sources.values():
+        for srcs in list(self.sources.values()):
             for f in srcs:
                 if mozpath.basename(mozpath.splitext(f)[0]) == mozpath.splitext(self.program)[0]:
                     return [f]
@@ -561,7 +561,7 @@
     KIND = 'host'
 
     def source_files(self):
-        for srcs in self.sources.values():
+        for srcs in list(self.sources.values()):
             for f in srcs:
                 if ('host_%s' % mozpath.basename(mozpath.splitext(f)[0]) ==
                     mozpath.splitext(self.program)[0]):
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/frontend/emitter.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/emitter.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/frontend/emitter.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/emitter.py	2020-04-04 03:49:08.929870224 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
+
 
 import itertools
 import logging
@@ -118,8 +118,8 @@
         # arguments. This gross hack works around the problem until we
         # rid ourselves of 2.6.
         self.info = {}
-        for k, v in mozinfo.info.items():
-            if isinstance(k, unicode):
+        for k, v in list(mozinfo.info.items()):
+            if isinstance(k, str):
                 k = k.encode('ascii')
             self.info[k] = v
 
@@ -240,7 +240,7 @@
 
 
         # Next do FINAL_LIBRARY linkage.
-        for lib in (l for libs in self._libs.values() for l in libs):
+        for lib in (l for libs in list(self._libs.values()) for l in libs):
             if not isinstance(lib, (StaticLibrary, RustLibrary)) or not lib.link_into:
                 continue
             if lib.link_into not in self._libs:
@@ -300,13 +300,13 @@
                         lib.link_into == outerlib.basename):
                     propagate_defines(lib, defines)
 
-        for lib in (l for libs in self._libs.values() for l in libs):
+        for lib in (l for libs in list(self._libs.values()) for l in libs):
             if isinstance(lib, Library):
                 propagate_defines(lib, lib.lib_defines)
             yield lib
 
 
-        for lib in (l for libs in self._libs.values() for l in libs):
+        for lib in (l for libs in list(self._libs.values()) for l in libs):
             lib_defines = list(lib.lib_defines.get_defines())
             if lib_defines:
                 objdir_flags = self._compile_flags[lib.objdir]
@@ -316,13 +316,13 @@
                 if objdir_flags:
                     objdir_flags.resolve_flags('LIBRARY_DEFINES', lib_defines)
 
-        for flags_obj in self._compile_flags.values():
+        for flags_obj in list(self._compile_flags.values()):
             yield flags_obj
 
-        for flags_obj in self._compile_as_flags.values():
+        for flags_obj in list(self._compile_as_flags.values()):
             yield flags_obj
 
-        for obj in self._binaries.values():
+        for obj in list(self._binaries.values()):
             yield obj
 
 
@@ -417,7 +417,7 @@
                         libs[key] = l
                     if key not in libs:
                         libs[key] = l
-            candidates = libs.values()
+            candidates = list(libs.values())
             if force_static and not candidates:
                 if dir:
                     raise SandboxValidationError(
@@ -481,9 +481,9 @@
 
     def _verify_deps(self, context, crate_dir, crate_name, dependencies, description='Dependency'):
         """Verify that a crate's dependencies all specify local paths."""
-        for dep_crate_name, values in dependencies.iteritems():
+        for dep_crate_name, values in dependencies.items():
             # A simple version number.
-            if isinstance(values, (str, unicode)):
+            if isinstance(values, str):
                 raise SandboxValidationError(
                     '%s %s of crate %s does not list a path' % (description, dep_crate_name, crate_name),
                     context)
@@ -537,7 +537,7 @@
 
         cargo_target_dir = context.config.topobjdir
 
-        dependencies = set(config.get('dependencies', {}).iterkeys())
+        dependencies = set(config.get('dependencies', {}).keys())
 
         features = context.get(cls.FEATURES_VAR, [])
         unique_features = set(features)
@@ -884,9 +884,9 @@
         assert not gen_sources['UNIFIED_SOURCES']
 
         no_pgo = context.get('NO_PGO')
-        no_pgo_sources = [f for f, flags in all_flags.iteritems()
+        no_pgo_sources = [f for f, flags in all_flags.items()
                           if flags.no_pgo]
-        pgo_gen_only_sources = set(f for f, flags in all_flags.iteritems()
+        pgo_gen_only_sources = set(f for f, flags in all_flags.items()
                                    if flags.pgo_generate_only)
         if no_pgo:
             if no_pgo_sources:
@@ -913,7 +913,7 @@
 
         # The inverse of the above, mapping suffixes to their canonical suffix.
         canonicalized_suffix_map = {}
-        for suffix, alternatives in suffix_map.iteritems():
+        for suffix, alternatives in suffix_map.items():
             alternatives.add(suffix)
             for a in alternatives:
                 canonicalized_suffix_map[a] = suffix
@@ -937,7 +937,7 @@
         # Source files to track for linkables associated with this context.
         ctxt_sources = defaultdict(lambda: defaultdict(list))
 
-        for variable, (klass, gen_klass, suffixes) in varmap.items():
+        for variable, (klass, gen_klass, suffixes) in list(varmap.items()):
             allowed_suffixes = set().union(*[suffix_map[s] for s in suffixes])
 
             # First ensure that we haven't been given filetypes that we don't
@@ -966,14 +966,14 @@
                     obj = cls(*arglist)
                     srcs = obj.files
                     if isinstance(obj, UnifiedSources) and obj.have_unified_mapping:
-                        srcs = dict(obj.unified_source_mapping).keys()
+                        srcs = list(dict(obj.unified_source_mapping).keys())
                     ctxt_sources[variable][canonical_suffix] += sorted(srcs)
                     yield obj
 
         if ctxt_sources:
             for linkable in linkables:
                 for target_var in ('SOURCES', 'UNIFIED_SOURCES'):
-                    for suffix, srcs in ctxt_sources[target_var].items():
+                    for suffix, srcs in list(ctxt_sources[target_var].items()):
                         linkable.sources[suffix] += srcs
                 if pgo_gen_only_sources:
                     linkable.pgo_gen_only_sources = pgo_gen_only_sources
@@ -982,10 +982,10 @@
                 elif no_pgo:
                     linkable.no_pgo = True
             for host_linkable in host_linkables:
-                for suffix, srcs in ctxt_sources['HOST_SOURCES'].items():
+                for suffix, srcs in list(ctxt_sources['HOST_SOURCES'].items()):
                     host_linkable.sources[suffix] += srcs
 
-        for f, flags in all_flags.iteritems():
+        for f, flags in all_flags.items():
             if flags.flags:
                 ext = mozpath.splitext(f)[1]
                 yield PerSourceFlag(context, f, flags.flags)
@@ -1211,7 +1211,7 @@
         for obj in self._handle_linkables(context, passthru, generated_files):
             yield obj
 
-        generated_files.update(['%s%s' % (k, self.config.substs.get('BIN_SUFFIX', '')) for k in self._binaries.keys()])
+        generated_files.update(['%s%s' % (k, self.config.substs.get('BIN_SUFFIX', '')) for k in list(self._binaries.keys())])
 
         components = []
         for var, cls in (
@@ -1423,7 +1423,7 @@
             script = mozpath.join(mozpath.dirname(mozpath.dirname(__file__)),
                                   'action', 'process_define_files.py')
             yield GeneratedFile(context, script, 'process_define_file',
-                                unicode(path),
+                                str(path),
                                 [Path(context, path + '.in')])
 
         generated_files = context.get('GENERATED_FILES') or []
@@ -1470,7 +1470,7 @@
                                     flags.flags, localized=localized, force=flags.force)
 
     def _process_test_manifests(self, context):
-        for prefix, info in TEST_MANIFESTS.items():
+        for prefix, info in list(TEST_MANIFESTS.items()):
             for path, manifest in context.get('%s_MANIFESTS' % prefix, []):
                 for obj in self._process_test_manifest(context, info, path, manifest):
                     yield obj
@@ -1551,7 +1551,7 @@
 
                 process_support_files(test)
 
-            for path, m_defaults in mpmanifest.manifest_defaults.items():
+            for path, m_defaults in list(mpmanifest.manifest_defaults.items()):
                 process_support_files(m_defaults)
 
             # We also copy manifests into the output directory,
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/frontend/reader.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/reader.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/frontend/reader.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/reader.py	2020-04-04 03:49:09.723870297 +0900
@@ -16,7 +16,7 @@
 It does this by examining specific variables populated during execution.
 """
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import ast
 import inspect
@@ -78,12 +78,13 @@
 
 from mozbuild.base import ExecutionSummary
 from concurrent.futures.process import ProcessPoolExecutor
+from functools import reduce
 
 
 
 if sys.version_info.major == 2:
-    text_type = unicode
-    type_type = types.TypeType
+    text_type = str
+    type_type = type
 else:
     text_type = str
     type_type = type
@@ -124,7 +125,7 @@
 
         self.substs = self.PopulateOnGetDict(EmptyValue, substs or self.default_substs)
         udict = {}
-        for k, v in self.substs.items():
+        for k, v in list(self.substs.items()):
             if isinstance(v, str):
                 udict[k.decode('utf-8')] = v.decode('utf-8')
             else:
@@ -292,7 +293,7 @@
             raise Exception('`template` is a function decorator. You must '
                 'use it as `@template` preceding a function declaration.')
 
-        name = func.func_name
+        name = func.__name__
 
         if name in self.templates:
             raise KeyError(
@@ -371,7 +372,7 @@
             klass = self._context.__class__
             self._context.__class__ = TemplateContext
             # The sandbox will do all the necessary checks for these merges.
-            for key, value in context.items():
+            for key, value in list(context.items()):
                 if isinstance(value, dict):
                     self[key].update(value)
                 elif isinstance(value, (list, HierarchicalStringList)):
@@ -388,10 +389,10 @@
 
 class TemplateFunction(object):
     def __init__(self, func, sandbox):
-        self.path = func.func_code.co_filename
-        self.name = func.func_name
+        self.path = func.__code__.co_filename
+        self.name = func.__name__
 
-        code = func.func_code
+        code = func.__code__
         firstlineno = code.co_firstlineno
         lines = sandbox._current_source.splitlines(True)
         if lines:
@@ -435,8 +436,8 @@
             compile(func_ast, self.path, 'exec'),
             glob,
             self.name,
-            func.func_defaults,
-            func.func_closure,
+            func.__defaults__,
+            func.__closure__,
         )
         func()
 
@@ -450,11 +451,11 @@
             '__builtins__': sandbox._builtins
         }
         func = types.FunctionType(
-            self._func.func_code,
+            self._func.__code__,
             glob,
             self.name,
-            self._func.func_defaults,
-            self._func.func_closure
+            self._func.__defaults__,
+            self._func.__closure__
         )
         sandbox.exec_function(func, args, kwargs, self.path,
                               becomes_current_path=False)
@@ -470,7 +471,7 @@
         def visit_Str(self, node):
             # String nodes we got from the AST parser are str, but we want
             # unicode literals everywhere, so transform them.
-            node.s = unicode(node.s)
+            node.s = str(node.s)
             return node
 
         def visit_Name(self, node):
@@ -603,7 +604,7 @@
 
             for l in traceback.format_exception(type(self.other), self.other,
                 self.trace):
-                s.write(unicode(l))
+                s.write(str(l))
 
         return s.getvalue()
 
@@ -753,7 +754,7 @@
             s.write('    %s\n' % inner.args[2])
             s.write('\n')
             close_matches = difflib.get_close_matches(inner.args[2],
-                                                      VARIABLES.keys(), 2)
+                                                      list(VARIABLES.keys()), 2)
             if close_matches:
                 s.write('Maybe you meant %s?\n' % ' or '.join(close_matches))
                 s.write('\n')
@@ -1004,7 +1005,7 @@
                 self.helper(node)
 
         if path:
-            mozbuild_paths = chain(*self._find_relevant_mozbuilds([path]).values())
+            mozbuild_paths = chain(*list(self._find_relevant_mozbuilds([path]).values()))
         else:
             mozbuild_paths = self.all_mozbuild_paths()
 
@@ -1143,7 +1144,7 @@
                         context)
                 non_unified_sources.add(source)
             action_overrides = {}
-            for action, script in gyp_dir.action_overrides.iteritems():
+            for action, script in gyp_dir.action_overrides.items():
                 action_overrides[action] = SourcePath(context, script)
 
             gyp_processor = GypProcessor(context.config,
@@ -1179,7 +1180,7 @@
 
                 recurse_info[d][key] = dict(sandbox.metadata[key])
 
-        for path, child_metadata in recurse_info.items():
+        for path, child_metadata in list(recurse_info.items()):
             child_path = path.join('moz.build').full_path
 
             # Ensure we don't break out of the topsrcdir. We don't do realpath
@@ -1270,7 +1271,7 @@
         # There is room to improve this code (and the code in
         # _find_relevant_mozbuilds) to better handle multiple files in the same
         # directory. Bug 1136966 tracks.
-        for path, mbpaths in relevants.items():
+        for path, mbpaths in list(relevants.items()):
             path_mozbuilds[path] = [mozpath.join(topsrcdir, p) for p in mbpaths]
 
             for i, mbpath in enumerate(mbpaths[0:-1]):
@@ -1307,7 +1308,7 @@
             all_contexts.append(context)
 
         result = {}
-        for path, paths in path_mozbuilds.items():
+        for path, paths in list(path_mozbuilds.items()):
             result[path] = reduce(lambda x, y: x + y, (contexts[p] for p in paths), [])
 
         return result, all_contexts
@@ -1356,7 +1357,7 @@
 
             return '*' in pattern and mozpath.match(relpath, pattern)
 
-        for path, ctxs in paths.items():
+        for path, ctxs in list(paths.items()):
             # Should be normalized by read_relevant_mozbuilds.
             assert '\\' not in path
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/frontend/sandbox.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/sandbox.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/frontend/sandbox.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/frontend/sandbox.py	2020-04-04 03:49:09.845870308 +0900
@@ -17,7 +17,7 @@
 user-friendly error messages in the case of errors.
 """
 
-from __future__ import absolute_import, unicode_literals
+
 
 import os
 import sys
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/__init__.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/__init__.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/jar.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/jar.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/jar.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/jar.py	2020-04-04 03:49:10.179870339 +0900
@@ -8,7 +8,7 @@
 See the documentation for jar.mn on MDC for further details on the format.
 '''
 
-from __future__ import absolute_import
+
 
 import sys
 import os
@@ -17,7 +17,7 @@
 import logging
 from time import localtime
 from MozZipFile import ZipFile
-from cStringIO import StringIO
+from io import StringIO
 from collections import defaultdict
 
 from mozbuild.preprocessor import Preprocessor
@@ -302,9 +302,9 @@
         '''updateManifest replaces the % in the chrome registration entries
         with the given chrome base path, and updates the given manifest file.
         '''
-        myregister = dict.fromkeys(map(lambda s: s.replace('%',
-            chromebasepath), register))
-        addEntriesToListFile(manifestPath, myregister.iterkeys())
+        myregister = dict.fromkeys([s.replace('%',
+            chromebasepath) for s in register])
+        addEntriesToListFile(manifestPath, iter(myregister.keys()))
 
     def makeJar(self, infile, jardir):
         '''makeJar is the main entry point to JarMaker.
@@ -322,7 +322,7 @@
         elif self.relativesrcdir:
             self.localedirs = \
                 self.generateLocaleDirs(self.relativesrcdir)
-        if isinstance(infile, basestring):
+        if isinstance(infile, str):
             logging.info('processing ' + infile)
             self.sourcedirs.append(_normpath(os.path.dirname(infile)))
         pp = self.pp.clone()
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/makeutil.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/makeutil.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/makeutil.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/makeutil.py	2020-04-04 03:49:10.271870347 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import
+
 
 import os
 import re
@@ -66,7 +66,7 @@
         self._list = []
         self._set = set()
 
-    def __nonzero__(self):
+    def __bool__(self):
         return bool(self._set)
 
     def __iter__(self):
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/mozinfo.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/mozinfo.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/mozinfo.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/mozinfo.py	2020-04-04 03:49:10.353870355 +0900
@@ -5,7 +5,7 @@
 # This module produces a JSON file that provides basic build info and
 # configuration metadata.
 
-from __future__ import absolute_import
+
 
 import os
 import re
@@ -144,7 +144,7 @@
     and what keys are produced.
     """
     build_conf = build_dict(config, env)
-    if isinstance(file, basestring):
+    if isinstance(file, str):
         file = open(file, 'wb')
 
     json.dump(build_conf, file, sort_keys=True, indent=4)
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/preprocessor.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/preprocessor.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/preprocessor.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/preprocessor.py	2020-04-04 03:49:10.897870405 +0900
@@ -27,7 +27,8 @@
 import re
 from optparse import OptionParser
 import errno
-from makeutil import Makefile
+from .makeutil import Makefile
+from functools import reduce
 
 # hack around win32 mangling our line endings
 # http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65443
@@ -239,7 +240,7 @@
         def __repr__(self):
             return self.value.__repr__()
 
-    class ParseError(StandardError):
+    class ParseError(Exception):
         """
         Error raised when parsing fails.
         It has two members, offset and content, which give the offset of the
@@ -287,7 +288,7 @@
         self.context = Context()
         for k,v in {'FILE': '',
                     'LINE': 0,
-                    'DIRECTORY': os.path.abspath('.')}.iteritems():
+                    'DIRECTORY': os.path.abspath('.')}.items():
             self.context[k] = v
         try:
             # Can import globally because of bootstrapping issues.
@@ -310,21 +311,21 @@
         self.cmds = {}
         for cmd, level in {'define': 0,
                            'undef': 0,
-                           'if': sys.maxint,
-                           'ifdef': sys.maxint,
-                           'ifndef': sys.maxint,
+                           'if': sys.maxsize,
+                           'ifdef': sys.maxsize,
+                           'ifndef': sys.maxsize,
                            'else': 1,
                            'elif': 1,
                            'elifdef': 1,
                            'elifndef': 1,
-                           'endif': sys.maxint,
+                           'endif': sys.maxsize,
                            'expand': 0,
                            'literal': 0,
                            'filter': 0,
                            'unfilter': 0,
                            'include': 0,
                            'includesubst': 0,
-                           'error': 0}.iteritems():
+                           'error': 0}.items():
             self.cmds[cmd] = (level, getattr(self, 'do_' + cmd))
         self.out = sys.stdout
         self.setMarker(marker)
@@ -486,7 +487,7 @@
                 raise Preprocessor.Error(self, "--depend doesn't work with stdout",
                                          None)
             try:
-                from makeutil import Makefile
+                from .makeutil import Makefile
             except:
                 raise Preprocessor.Error(self, "--depend requires the "
                                                "mozbuild.makeutil module", None)
@@ -701,7 +702,7 @@
         current = dict(self.filters)
         for f in filters:
             current[f] = getattr(self, 'filter_' + f)
-        filterNames = current.keys()
+        filterNames = list(current.keys())
         filterNames.sort()
         self.filters = [(fn, current[fn]) for fn in filterNames]
         return
@@ -711,7 +712,7 @@
         for f in filters:
             if f in current:
                 del current[f]
-        filterNames = current.keys()
+        filterNames = list(current.keys())
         filterNames.sort()
         self.filters = [(fn, current[fn]) for fn in filterNames]
         return
@@ -756,7 +757,7 @@
         args can either be a file name, or a file-like object.
         Files should be opened, and will be closed after processing.
         """
-        isName = type(args) == str or type(args) == unicode
+        isName = type(args) == str or type(args) == str
         oldCheckLineNumbers = self.checkLineNumbers
         self.checkLineNumbers = False
         if isName:
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/pythonutil.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/pythonutil.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/shellutil.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/shellutil.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/shellutil.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/shellutil.py	2020-04-04 03:49:11.053870419 +0900
@@ -15,7 +15,7 @@
     # which matches the pattern and captures it in a named match group.
     # The group names and patterns are given as arguments.
     all_tokens = '|'.join('(?P<%s>%s)' % (name, value)
-                          for name, value in tokens.iteritems())
+                          for name, value in tokens.items())
     nonescaped = r'(?<!\\)(?:%s)' % all_tokens
 
     # The final pattern matches either the above pattern, or an escaped
@@ -96,7 +96,7 @@
             self.cline = self.cline[m.end():]
 
             match = {name: value
-                     for name, value in m.groupdict().items() if value}
+                     for name, value in list(m.groupdict().items()) if value}
             if 'quote' in match:
                 # " or ' start a quoted string
                 if match['quote'] == '"':
@@ -144,7 +144,7 @@
             self._push(self.cline[:m.start()])
             self.cline = self.cline[m.end():]
             match = {name: value
-                     for name, value in m.groupdict().items() if value}
+                     for name, value in list(m.groupdict().items()) if value}
             if 'quote' in match:
                 # a double quote ends the quoted string, so go back to
                 # unquoted parsing
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/shellutil.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/shellutil.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/backend/test_recursivemake.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/backend/test_recursivemake.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/backend/test_recursivemake.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/backend/test_recursivemake.py	2020-04-04 03:49:11.867870494 +0900
@@ -2,9 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import unicode_literals
 
-import cPickle as pickle
+
+import pickle as pickle
 import json
 import os
 import unittest
@@ -336,7 +336,7 @@
             ],
         }
 
-        for var, val in expected.items():
+        for var, val in list(expected.items()):
             # print("test_variable_passthru[%s]" % (var))
             found = [str for str in lines if str.startswith(var)]
             self.assertEqual(found, val)
@@ -375,7 +375,7 @@
             ],
         }
 
-        for var, val in expected.items():
+        for var, val in list(expected.items()):
             found = [str for str in lines if str.startswith(var)]
             self.assertEqual(found, val)
 
@@ -641,7 +641,7 @@
 
         # This is not the most robust test in the world, but it gets the job
         # done.
-        entries = [e for e in m._dests.keys() if '**' in e]
+        entries = [e for e in list(m._dests.keys()) if '**' in e]
         self.assertEqual(len(entries), 1)
         self.assertIn('support/**', entries[0])
 
@@ -668,11 +668,11 @@
                          set(['child/test_sub.js',
                               'child/data/**',
                               'child/another-file.sjs']))
-        for key in test_installs.keys():
+        for key in list(test_installs.keys()):
             self.assertIn(key, test_installs)
 
         synthesized_manifest = InstallManifest()
-        for item, installs in test_installs.items():
+        for item, installs in list(test_installs.items()):
             for install_info in installs:
                 if len(install_info) == 3:
                     synthesized_manifest.add_pattern_link(*install_info)
@@ -680,7 +680,7 @@
                     synthesized_manifest.add_link(*install_info)
 
         self.assertEqual(len(synthesized_manifest), 3)
-        for item, info in synthesized_manifest._dests.items():
+        for item, info in list(synthesized_manifest._dests.items()):
             self.assertIn(item, m)
             self.assertEqual(info, m._dests[item])
 
@@ -945,7 +945,7 @@
         expected[mozpath.join(env.topobjdir, 'final-target')] = [
             'FINAL_TARGET = $(DEPTH)/random-final-target'
         ]
-        for key, expected_rules in expected.iteritems():
+        for key, expected_rules in expected.items():
             backend_path = mozpath.join(key, 'backend.mk')
             lines = [l.strip() for l in open(backend_path, 'rt').readlines()[2:]]
             found = [str for str in lines if
@@ -1094,7 +1094,7 @@
             }
         }
         actual_linkage = {}
-        for name in expected_linkage.keys():
+        for name in list(expected_linkage.keys()):
             with open(os.path.join(env.topobjdir, name, 'backend.mk'), 'rb') as fh:
                 actual_linkage[name] = [line.rstrip() for line in fh.readlines()]
         for name in expected_linkage:
@@ -1121,7 +1121,7 @@
             ],
         }
         actual_list_files = {}
-        for name in expected_list_files.keys():
+        for name in list(expected_list_files.keys()):
             with open(os.path.join(env.topobjdir, name), 'rb') as fh:
                 actual_list_files[name] = [line.rstrip()
                                            for line in fh.readlines()]
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/common.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/common.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/common.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/common.py	2020-04-04 03:49:12.040870510 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import copy
 import errno
@@ -16,7 +16,7 @@
 from mozbuild.util import ReadOnlyNamespace
 from mozpack import path as mozpath
 
-from StringIO import StringIO
+from io import StringIO
 from which import WhichError
 
 from buildconfig import (
@@ -77,10 +77,10 @@
         self._search_path = environ.get('PATH', '').split(os.pathsep)
 
         self._subprocess_paths = {
-            mozpath.abspath(k): v for k, v in paths.iteritems() if v
+            mozpath.abspath(k): v for k, v in paths.items() if v
         }
 
-        paths = paths.keys()
+        paths = list(paths.keys())
 
         environ = copy.copy(environ)
         if 'CONFIG_SHELL' not in environ:
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/lint.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/lint.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/lint.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/lint.py	2020-04-04 03:49:12.083870514 +0900
@@ -2,11 +2,11 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import os
 import unittest
-from StringIO import StringIO
+from io import StringIO
 from mozunit import main
 from buildconfig import (
     topobjdir,
@@ -39,9 +39,7 @@
         return type.__new__(mcs, name, bases, attrs)
 
 
-class Lint(unittest.TestCase):
-    __metaclass__ = LintMeta
-
+class Lint(unittest.TestCase, metaclass=LintMeta):
     def setUp(self):
         self._curdir = os.getcwd()
         os.chdir(topobjdir)
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_checks_configure.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_checks_configure.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_checks_configure.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_checks_configure.py	2020-04-04 03:49:12.541870556 +0900
@@ -2,9 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
 
-from StringIO import StringIO
+
+from io import StringIO
 import os
 import sys
 import textwrap
@@ -448,7 +448,7 @@
             checking for a... %s
         ''' % self.OTHER_A))
 
-        dirs = map(mozpath.dirname, (self.OTHER_A, self.KNOWN_A))
+        dirs = list(map(mozpath.dirname, (self.OTHER_A, self.KNOWN_A)))
         config, out, status = self.get_result(textwrap.dedent('''\
             check_prog("A", ("known-a",), paths=["%s"])
         ''' % os.pathsep.join(dirs)))
@@ -458,7 +458,7 @@
             checking for a... %s
         ''' % self.OTHER_A))
 
-        dirs = map(mozpath.dirname, (self.KNOWN_A, self.KNOWN_B))
+        dirs = list(map(mozpath.dirname, (self.KNOWN_A, self.KNOWN_B)))
         config, out, status = self.get_result(textwrap.dedent('''\
             check_prog("A", ("known-a",), paths=["%s", "%s"])
         ''' % (os.pathsep.join(dirs), self.OTHER_A)))
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_compile_checks.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_compile_checks.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_compile_checks.py	2020-01-18 00:46:11.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_compile_checks.py	2020-04-04 03:49:12.746870575 +0900
@@ -2,14 +2,14 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import os
 import textwrap
 import unittest
 import mozpack.path as mozpath
 
-from StringIO import StringIO
+from io import StringIO
 
 from buildconfig import topsrcdir
 from common import ConfigureTestSandbox
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_configure.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_configure.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_configure.py	2020-01-18 00:46:20.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_configure.py	2020-04-04 03:49:13.609870654 +0900
@@ -2,9 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
 
-from StringIO import StringIO
+
+from io import StringIO
 import os
 import sys
 import textwrap
@@ -43,7 +43,7 @@
 
         if '--help' in options:
             return out.getvalue(), config
-        self.assertEquals('', out.getvalue())
+        self.assertEqual('', out.getvalue())
         return config
 
     def moz_configure(self, source):
@@ -55,7 +55,7 @@
     def test_defaults(self):
         config = self.get_config()
         self.maxDiff = None
-        self.assertEquals({
+        self.assertEqual({
             'CHOICES': NegativeOptionValue(),
             'DEFAULTED': PositiveOptionValue(('not-simple',)),
             'IS_GCC': NegativeOptionValue(),
@@ -71,9 +71,9 @@
     def test_help(self):
         help, config = self.get_config(['--help'], prog='configure')
 
-        self.assertEquals({}, config)
+        self.assertEqual({}, config)
         self.maxDiff = None
-        self.assertEquals(
+        self.assertEqual(
             'Usage: configure [options]\n'
             '\n'
             'Options: [defaults in brackets after descriptions]\n'
@@ -109,7 +109,7 @@
         ):
             self.assertNotIn('ENABLED_SIMPLE', config)
             self.assertIn('SIMPLE', config)
-            self.assertEquals(NegativeOptionValue(), config['SIMPLE'])
+            self.assertEqual(NegativeOptionValue(), config['SIMPLE'])
 
         for config in (
                 self.get_config(['--enable-simple']),
@@ -117,7 +117,7 @@
         ):
             self.assertIn('ENABLED_SIMPLE', config)
             self.assertIn('SIMPLE', config)
-            self.assertEquals(PositiveOptionValue(), config['SIMPLE'])
+            self.assertEqual(PositiveOptionValue(), config['SIMPLE'])
             self.assertIs(config['SIMPLE'], config['ENABLED_SIMPLE'])
 
         # --enable-simple doesn't take values.
@@ -135,7 +135,7 @@
                                 env={'MOZ_WITH_ENV': '1'}),
         ):
             self.assertIn('WITH_ENV', config)
-            self.assertEquals(NegativeOptionValue(), config['WITH_ENV'])
+            self.assertEqual(NegativeOptionValue(), config['WITH_ENV'])
 
         for config in (
                 self.get_config(['--enable-with-env']),
@@ -145,7 +145,7 @@
                                 env={'MOZ_WITH_ENV': ''}),
         ):
             self.assertIn('WITH_ENV', config)
-            self.assertEquals(PositiveOptionValue(), config['WITH_ENV'])
+            self.assertEqual(PositiveOptionValue(), config['WITH_ENV'])
 
         with self.assertRaises(InvalidOptionError):
             self.get_config(['--enable-with-env=value'])
@@ -160,23 +160,23 @@
             self.get_config(['--enable-values', '--disable-values']),
         ):
             self.assertIn(name, config)
-            self.assertEquals(NegativeOptionValue(), config[name])
+            self.assertEqual(NegativeOptionValue(), config[name])
 
         for config in (
             self.get_config(['--enable-values']),
             self.get_config(['--disable-values', '--enable-values']),
         ):
             self.assertIn(name, config)
-            self.assertEquals(PositiveOptionValue(), config[name])
+            self.assertEqual(PositiveOptionValue(), config[name])
 
         config = self.get_config(['--enable-values=foo'])
         self.assertIn(name, config)
-        self.assertEquals(PositiveOptionValue(('foo',)), config[name])
+        self.assertEqual(PositiveOptionValue(('foo',)), config[name])
 
         config = self.get_config(['--enable-values=foo,bar'])
         self.assertIn(name, config)
         self.assertTrue(config[name])
-        self.assertEquals(PositiveOptionValue(('foo', 'bar')), config[name])
+        self.assertEqual(PositiveOptionValue(('foo', 'bar')), config[name])
 
     def test_values2(self):
         self.test_values('VALUES2')
@@ -187,12 +187,12 @@
     def test_returned_default(self):
         config = self.get_config(['--enable-simple'])
         self.assertIn('DEFAULTED', config)
-        self.assertEquals(
+        self.assertEqual(
             PositiveOptionValue(('simple',)), config['DEFAULTED'])
 
         config = self.get_config(['--disable-simple'])
         self.assertIn('DEFAULTED', config)
-        self.assertEquals(
+        self.assertEqual(
             PositiveOptionValue(('not-simple',)), config['DEFAULTED'])
 
     def test_returned_choices(self):
@@ -200,13 +200,13 @@
             config = self.get_config(
                 ['--enable-values=alpha', '--returned-choices=%s' % val])
             self.assertIn('CHOICES', config)
-            self.assertEquals(PositiveOptionValue((val,)), config['CHOICES'])
+            self.assertEqual(PositiveOptionValue((val,)), config['CHOICES'])
 
         for val in ('0', '1', '2'):
             config = self.get_config(
                 ['--enable-values=numeric', '--returned-choices=%s' % val])
             self.assertIn('CHOICES', config)
-            self.assertEquals(PositiveOptionValue((val,)), config['CHOICES'])
+            self.assertEqual(PositiveOptionValue((val,)), config['CHOICES'])
 
         with self.assertRaises(InvalidOptionError):
             self.get_config(['--enable-values=numeric',
@@ -218,12 +218,12 @@
     def test_included(self):
         config = self.get_config(env={'CC': 'gcc'})
         self.assertIn('IS_GCC', config)
-        self.assertEquals(config['IS_GCC'], True)
+        self.assertEqual(config['IS_GCC'], True)
 
         config = self.get_config(
             ['--enable-include=extra.configure', '--extra'])
         self.assertIn('EXTRA', config)
-        self.assertEquals(PositiveOptionValue(), config['EXTRA'])
+        self.assertEqual(PositiveOptionValue(), config['EXTRA'])
 
         with self.assertRaises(InvalidOptionError):
             self.get_config(['--extra'])
@@ -231,7 +231,7 @@
     def test_template(self):
         config = self.get_config(env={'CC': 'gcc'})
         self.assertIn('CFLAGS', config)
-        self.assertEquals(config['CFLAGS'], ['-Werror=foobar'])
+        self.assertEqual(config['CFLAGS'], ['-Werror=foobar'])
 
         config = self.get_config(env={'CC': 'clang'})
         self.assertNotIn('CFLAGS', config)
@@ -288,7 +288,7 @@
             sandbox
         )
 
-        import __builtin__
+        import builtins
         self.assertIs(sandbox['foo'](), __builtin__)
 
         exec_(textwrap.dedent('''
@@ -300,7 +300,7 @@
         )
 
         f = sandbox['foo']()
-        self.assertEquals(f.name, os.devnull)
+        self.assertEqual(f.name, os.devnull)
         f.close()
 
         # This unlocks the sandbox
@@ -336,8 +336,8 @@
         self.assertIs(sandbox['foo'](), sandbox)
 
         # Nothing leaked from the function being executed
-        self.assertEquals(sandbox.keys(), ['__builtins__', 'foo'])
-        self.assertEquals(sandbox['__builtins__'], ConfigureSandbox.BUILTINS)
+        self.assertEqual(list(sandbox.keys()), ['__builtins__', 'foo'])
+        self.assertEqual(sandbox['__builtins__'], ConfigureSandbox.BUILTINS)
 
         exec_(textwrap.dedent('''
             @template
@@ -354,7 +354,7 @@
         with self.assertRaises(NameError) as e:
             sandbox._depends[sandbox['bar']].result()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "global name 'sys' is not defined")
 
     def test_apply_imports(self):
@@ -380,28 +380,28 @@
             sandbox
         )
 
-        self.assertEquals(len(imports), 1)
+        self.assertEqual(len(imports), 1)
 
     def test_os_path(self):
         config = self.get_config(['--with-imports=%s' % __file__])
         self.assertIn('HAS_ABSPATH', config)
-        self.assertEquals(config['HAS_ABSPATH'], True)
+        self.assertEqual(config['HAS_ABSPATH'], True)
         self.assertIn('HAS_GETATIME', config)
-        self.assertEquals(config['HAS_GETATIME'], True)
+        self.assertEqual(config['HAS_GETATIME'], True)
         self.assertIn('HAS_GETATIME2', config)
-        self.assertEquals(config['HAS_GETATIME2'], False)
+        self.assertEqual(config['HAS_GETATIME2'], False)
 
     def test_template_call(self):
         config = self.get_config(env={'CC': 'gcc'})
         self.assertIn('TEMPLATE_VALUE', config)
-        self.assertEquals(config['TEMPLATE_VALUE'], 42)
+        self.assertEqual(config['TEMPLATE_VALUE'], 42)
         self.assertIn('TEMPLATE_VALUE_2', config)
-        self.assertEquals(config['TEMPLATE_VALUE_2'], 21)
+        self.assertEqual(config['TEMPLATE_VALUE_2'], 21)
 
     def test_template_imports(self):
         config = self.get_config(['--enable-imports-in-template'])
         self.assertIn('PLATFORM', config)
-        self.assertEquals(config['PLATFORM'], sys.platform)
+        self.assertEqual(config['PLATFORM'], sys.platform)
 
     def test_decorators(self):
         config = {}
@@ -419,27 +419,27 @@
             return self.get_config(*args, configure='set_config.configure')
 
         help, config = get_config(['--help'])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config(['--set-foo'])
         self.assertIn('FOO', config)
-        self.assertEquals(config['FOO'], True)
+        self.assertEqual(config['FOO'], True)
 
         config = get_config(['--set-bar'])
         self.assertNotIn('FOO', config)
         self.assertIn('BAR', config)
-        self.assertEquals(config['BAR'], True)
+        self.assertEqual(config['BAR'], True)
 
         config = get_config(['--set-value=qux'])
         self.assertIn('VALUE', config)
-        self.assertEquals(config['VALUE'], 'qux')
+        self.assertEqual(config['VALUE'], 'qux')
 
         config = get_config(['--set-name=hoge'])
         self.assertIn('hoge', config)
-        self.assertEquals(config['hoge'], True)
+        self.assertEqual(config['hoge'], True)
 
         config = get_config([])
-        self.assertEquals(config, {'BAR': False})
+        self.assertEqual(config, {'BAR': False})
 
         with self.assertRaises(ConfigureError):
             # Both --set-foo and --set-name=FOO are going to try to
@@ -454,11 +454,11 @@
             set_config('QUX', 'qux', when='--with-qux')
         '''):
             config = self.get_config()
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': 'foo',
             })
             config = self.get_config(['--with-qux'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': 'foo',
                 'QUX': 'qux',
             })
@@ -468,27 +468,27 @@
             return self.get_config(*args, configure='set_define.configure')
 
         help, config = get_config(['--help'])
-        self.assertEquals(config, {'DEFINES': {}})
+        self.assertEqual(config, {'DEFINES': {}})
 
         config = get_config(['--set-foo'])
         self.assertIn('FOO', config['DEFINES'])
-        self.assertEquals(config['DEFINES']['FOO'], True)
+        self.assertEqual(config['DEFINES']['FOO'], True)
 
         config = get_config(['--set-bar'])
         self.assertNotIn('FOO', config['DEFINES'])
         self.assertIn('BAR', config['DEFINES'])
-        self.assertEquals(config['DEFINES']['BAR'], True)
+        self.assertEqual(config['DEFINES']['BAR'], True)
 
         config = get_config(['--set-value=qux'])
         self.assertIn('VALUE', config['DEFINES'])
-        self.assertEquals(config['DEFINES']['VALUE'], 'qux')
+        self.assertEqual(config['DEFINES']['VALUE'], 'qux')
 
         config = get_config(['--set-name=hoge'])
         self.assertIn('hoge', config['DEFINES'])
-        self.assertEquals(config['DEFINES']['hoge'], True)
+        self.assertEqual(config['DEFINES']['hoge'], True)
 
         config = get_config([])
-        self.assertEquals(config['DEFINES'], {'BAR': False})
+        self.assertEqual(config['DEFINES'], {'BAR': False})
 
         with self.assertRaises(ConfigureError):
             # Both --set-foo and --set-name=FOO are going to try to
@@ -503,11 +503,11 @@
             set_define('QUX', 'qux', when='--with-qux')
         '''):
             config = self.get_config()
-            self.assertEquals(config['DEFINES'], {
+            self.assertEqual(config['DEFINES'], {
                 'FOO': 'foo',
             })
             config = self.get_config(['--with-qux'])
-            self.assertEquals(config['DEFINES'], {
+            self.assertEqual(config['DEFINES'], {
                 'FOO': 'foo',
                 'QUX': 'qux',
             })
@@ -518,19 +518,19 @@
                 *args, configure='imply_option/simple.configure')
 
         help, config = get_config(['--help'])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config([])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config(['--enable-foo'])
         self.assertIn('BAR', config)
-        self.assertEquals(config['BAR'], PositiveOptionValue())
+        self.assertEqual(config['BAR'], PositiveOptionValue())
 
         with self.assertRaises(InvalidOptionError) as e:
             get_config(['--enable-foo', '--disable-bar'])
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "'--enable-bar' implied by '--enable-foo' conflicts with "
             "'--disable-bar' from the command-line")
@@ -541,31 +541,31 @@
                 *args, configure='imply_option/negative.configure')
 
         help, config = get_config(['--help'])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config([])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config(['--enable-foo'])
         self.assertIn('BAR', config)
-        self.assertEquals(config['BAR'], NegativeOptionValue())
+        self.assertEqual(config['BAR'], NegativeOptionValue())
 
         with self.assertRaises(InvalidOptionError) as e:
             get_config(['--enable-foo', '--enable-bar'])
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "'--disable-bar' implied by '--enable-foo' conflicts with "
             "'--enable-bar' from the command-line")
 
         config = get_config(['--disable-hoge'])
         self.assertIn('BAR', config)
-        self.assertEquals(config['BAR'], NegativeOptionValue())
+        self.assertEqual(config['BAR'], NegativeOptionValue())
 
         with self.assertRaises(InvalidOptionError) as e:
             get_config(['--disable-hoge', '--enable-bar'])
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "'--disable-bar' implied by '--disable-hoge' conflicts with "
             "'--enable-bar' from the command-line")
@@ -576,23 +576,23 @@
                 *args, configure='imply_option/values.configure')
 
         help, config = get_config(['--help'])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config([])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config(['--enable-foo=a'])
         self.assertIn('BAR', config)
-        self.assertEquals(config['BAR'], PositiveOptionValue(('a',)))
+        self.assertEqual(config['BAR'], PositiveOptionValue(('a',)))
 
         config = get_config(['--enable-foo=a,b'])
         self.assertIn('BAR', config)
-        self.assertEquals(config['BAR'], PositiveOptionValue(('a','b')))
+        self.assertEqual(config['BAR'], PositiveOptionValue(('a','b')))
 
         with self.assertRaises(InvalidOptionError) as e:
             get_config(['--enable-foo=a,b', '--disable-bar'])
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "'--enable-bar=a,b' implied by '--enable-foo' conflicts with "
             "'--disable-bar' from the command-line")
@@ -603,15 +603,15 @@
                 *args, configure='imply_option/infer.configure')
 
         help, config = get_config(['--help'])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config([])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         with self.assertRaises(InvalidOptionError) as e:
             get_config(['--enable-foo', '--disable-bar'])
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "'--enable-bar' implied by '--enable-foo' conflicts with "
             "'--disable-bar' from the command-line")
@@ -619,7 +619,7 @@
         with self.assertRaises(ConfigureError) as e:
             self.get_config([], configure='imply_option/infer_ko.configure')
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "Cannot infer what implies '--enable-bar'. Please add a `reason` "
             "to the `imply_option` call.")
@@ -630,25 +630,25 @@
                 *args, configure='imply_option/imm.configure')
 
         help, config = get_config(['--help'])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config = get_config([])
-        self.assertEquals(config, {})
+        self.assertEqual(config, {})
 
         config_path = mozpath.abspath(
             mozpath.join(test_data_path, 'imply_option', 'imm.configure'))
 
-        with self.assertRaisesRegexp(InvalidOptionError,
+        with self.assertRaisesRegex(InvalidOptionError,
             "--enable-foo' implied by 'imply_option at %s:7' conflicts with "
             "'--disable-foo' from the command-line" % config_path):
             get_config(['--disable-foo'])
 
-        with self.assertRaisesRegexp(InvalidOptionError,
+        with self.assertRaisesRegex(InvalidOptionError,
             "--enable-bar=foo,bar' implied by 'imply_option at %s:16' conflicts"
             " with '--enable-bar=a,b,c' from the command-line" % config_path):
             get_config(['--enable-bar=a,b,c'])
 
-        with self.assertRaisesRegexp(InvalidOptionError,
+        with self.assertRaisesRegex(InvalidOptionError,
             "--enable-baz=BAZ' implied by 'imply_option at %s:25' conflicts"
             " with '--enable-baz=QUUX' from the command-line" % config_path):
             get_config(['--enable-baz=QUUX'])
@@ -660,7 +660,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "`--with-foo`, emitted from `%s` line 2, is unknown."
                           % mozpath.join(test_data_path, 'moz.configure'))
 
@@ -675,7 +675,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Unexpected type: 'int'")
 
     def test_imply_option_when(self):
@@ -686,12 +686,12 @@
             set_config('QUX', depends('--with-qux')(lambda x: x))
         '''):
             config = self.get_config()
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'QUX': NegativeOptionValue(),
             })
 
             config = self.get_config(['--with-foo'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'QUX': PositiveOptionValue(),
             })
 
@@ -711,19 +711,19 @@
             set_config('QUX', depends('--with-qux')(lambda x: x))
         '''):
             config = self.get_config()
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': PositiveOptionValue(),
                 'QUX': PositiveOptionValue(),
             })
 
             config = self.get_config(['--without-foo'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': NegativeOptionValue(),
                 'QUX': NegativeOptionValue(),
             })
 
             config = self.get_config(['--with-qux'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': PositiveOptionValue(),
                 'QUX': PositiveOptionValue(),
             })
@@ -731,12 +731,12 @@
             with self.assertRaises(InvalidOptionError) as e:
                 config = self.get_config(['--without-foo', '--with-qux'])
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               "'--with-foo' implied by '--with-qux' conflicts "
                               "with '--without-foo' from the command-line")
 
             config = self.get_config(['--without-qux'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': PositiveOptionValue(),
                 'QUX': NegativeOptionValue(),
             })
@@ -756,13 +756,13 @@
             set_config('QUX', depends('--with-qux')(lambda x: x))
         '''):
             config = self.get_config()
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': NegativeOptionValue(),
                 'QUX': NegativeOptionValue(),
             })
 
             config = self.get_config(['--with-foo'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': PositiveOptionValue(),
                 'QUX': PositiveOptionValue(),
             })
@@ -770,19 +770,19 @@
             with self.assertRaises(InvalidOptionError) as e:
                 config = self.get_config(['--with-qux'])
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               "'--with-foo' implied by '--with-qux' conflicts "
                               "with '--without-foo' from the default")
 
             with self.assertRaises(InvalidOptionError) as e:
                 config = self.get_config(['--without-foo', '--with-qux'])
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               "'--with-foo' implied by '--with-qux' conflicts "
                               "with '--without-foo' from the command-line")
 
             config = self.get_config(['--without-qux'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': NegativeOptionValue(),
                 'QUX': NegativeOptionValue(),
             })
@@ -812,24 +812,24 @@
             with self.assertRaises(ConfigureError) as e:
                 config = self.get_config()
 
-            self.assertEquals(e.exception.message, message)
+            self.assertEqual(e.exception.message, message)
 
             with self.assertRaises(ConfigureError) as e:
                 config = self.get_config(['--with-qux'])
 
-            self.assertEquals(e.exception.message, message)
+            self.assertEqual(e.exception.message, message)
 
             with self.assertRaises(ConfigureError) as e:
                 config = self.get_config(['--without-foo', '--with-qux'])
 
-            self.assertEquals(e.exception.message, message)
+            self.assertEqual(e.exception.message, message)
 
     def test_option_failures(self):
         with self.assertRaises(ConfigureError) as e:
             with self.moz_configure('option("--with-foo", help="foo")'):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Option `--with-foo` is not handled ; reference it with a @depends'
         )
@@ -841,7 +841,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Option `--with-foo` already defined'
         )
@@ -853,7 +853,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Option `MOZ_FOO` already defined'
         )
@@ -865,7 +865,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Option `MOZ_FOO` already defined'
         )
@@ -877,7 +877,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Option `MOZ_FOO` already defined'
         )
@@ -889,7 +889,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Option `--with-foo` already defined'
         )
@@ -905,18 +905,18 @@
             set_config('QUX', depends('--with-qux', when='--with-foo')(lambda x: x))
         '''):
             config = self.get_config()
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': NegativeOptionValue(),
             })
 
             config = self.get_config(['--with-foo'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': PositiveOptionValue(),
                 'QUX': NegativeOptionValue(),
             })
 
             config = self.get_config(['--with-foo', '--with-qux'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': PositiveOptionValue(),
                 'QUX': PositiveOptionValue(),
             })
@@ -924,7 +924,7 @@
             with self.assertRaises(InvalidOptionError) as e:
                 self.get_config(['--with-bar'])
 
-            self.assertEquals(
+            self.assertEqual(
                 e.exception.message,
                 '--with-bar is not available in this configuration'
             )
@@ -932,7 +932,7 @@
             with self.assertRaises(InvalidOptionError) as e:
                 self.get_config(['--with-qux'])
 
-            self.assertEquals(
+            self.assertEqual(
                 e.exception.message,
                 '--with-qux is not available in this configuration'
             )
@@ -940,18 +940,18 @@
             with self.assertRaises(InvalidOptionError) as e:
                 self.get_config(['QUX=1'])
 
-            self.assertEquals(
+            self.assertEqual(
                 e.exception.message,
                 'QUX is not available in this configuration'
             )
 
             config = self.get_config(env={'QUX': '1'})
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': NegativeOptionValue(),
             })
 
             help, config = self.get_config(['--help'])
-            self.assertEquals(help, textwrap.dedent('''\
+            self.assertEqual(help, textwrap.dedent('''\
                 Usage: configure [options]
 
                 Options: [defaults in brackets after descriptions]
@@ -962,7 +962,7 @@
             '''))
 
             help, config = self.get_config(['--help', '--with-foo'])
-            self.assertEquals(help, textwrap.dedent('''\
+            self.assertEqual(help, textwrap.dedent('''\
                 Usage: configure [options]
 
                 Options: [defaults in brackets after descriptions]
@@ -980,7 +980,7 @@
             with self.assertRaises(ConfigureError) as e:
                 self.get_config()
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               '@depends function needs the same `when` as '
                               'options it depends on')
 
@@ -997,7 +997,7 @@
             with self.assertRaises(ConfigureError) as e:
                 self.get_config()
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               '@depends function needs the same `when` as '
                               'options it depends on')
 
@@ -1050,7 +1050,7 @@
             with self.moz_configure('include("../foo.configure")'):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Cannot include `%s` because it is not in a subdirectory of `%s`'
             % (mozpath.normpath(mozpath.join(test_data_path, '..',
@@ -1065,7 +1065,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'Cannot include `%s` because it was included already.'
             % mozpath.normpath(mozpath.join(test_data_path,
@@ -1078,7 +1078,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message, "Unexpected type: 'int'")
+        self.assertEqual(e.exception.message, "Unexpected type: 'int'")
 
     def test_include_when(self):
         with MockedOpen({
@@ -1121,26 +1121,26 @@
             '''),
         }):
             config = self.get_config()
-            self.assertEquals(config, {})
+            self.assertEqual(config, {})
 
             config = self.get_config(['--with-foo'])
-            self.assertEquals(config, {})
+            self.assertEqual(config, {})
 
             config = self.get_config(['--with-bar'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'BAR': 'bar',
             })
 
             with self.assertRaises(InvalidOptionError) as e:
                 self.get_config(['--with-qux'])
 
-            self.assertEquals(
+            self.assertEqual(
                 e.exception.message,
                 '--with-qux is not available in this configuration'
             )
 
             config = self.get_config(['--with-foo', '--with-foo-really'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': 'foo',
                 'FOO2': True,
             })
@@ -1152,7 +1152,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message, 'Cannot reassign builtins')
+        self.assertEqual(e.exception.message, 'Cannot reassign builtins')
 
         with self.assertRaises(KeyError) as e:
             with self.moz_configure('''
@@ -1160,7 +1160,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           'Cannot assign `foo` because it is neither a '
                           '@depends nor a @template')
 
@@ -1173,7 +1173,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "@depends needs at least one argument")
 
         with self.assertRaises(ConfigureError) as e:
@@ -1184,7 +1184,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "'--with-foo' is not a known option. Maybe it's "
                           "declared too late?")
 
@@ -1196,7 +1196,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Option must not contain an '='")
 
         with self.assertRaises(TypeError) as e:
@@ -1207,7 +1207,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Cannot use object of type 'int' as argument "
                           "to @depends")
 
@@ -1219,7 +1219,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Cannot decorate generator functions with @depends")
 
         with self.assertRaises(TypeError) as e:
@@ -1228,7 +1228,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Unexpected type: 'int'")
 
         with self.assertRaises(ConfigureError) as e:
@@ -1242,7 +1242,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The `foo` function may not be called")
 
         with self.assertRaises(TypeError) as e:
@@ -1253,7 +1253,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "depends_impl() got an unexpected keyword argument 'foo'")
 
     def test_depends_when(self):
@@ -1278,12 +1278,12 @@
             set_config('QUX', qux)
         '''):
             config = self.get_config()
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': 'foo',
             })
 
             config = self.get_config(['--with-qux'])
-            self.assertEquals(config, {
+            self.assertEqual(config, {
                 'FOO': 'foo',
                 'QUX': 'qux',
             })
@@ -1298,7 +1298,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           '@imports must appear after @template')
 
         with self.assertRaises(ConfigureError) as e:
@@ -1311,7 +1311,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           '@imports must appear after @depends')
 
         for import_ in (
@@ -1328,7 +1328,7 @@
                 ''' % import_):
                     self.get_config()
 
-            self.assertEquals(e.exception.message, "Unexpected type: 'int'")
+            self.assertEqual(e.exception.message, "Unexpected type: 'int'")
 
         with self.assertRaises(TypeError) as e:
             with self.moz_configure('''
@@ -1339,7 +1339,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message, "Unexpected type: 'int'")
+        self.assertEqual(e.exception.message, "Unexpected type: 'int'")
 
         with self.assertRaises(ValueError) as e:
             with self.moz_configure('''
@@ -1349,7 +1349,7 @@
             '''):
                 self.get_config()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Invalid argument to @imports: 'os*'")
 
     def test_only_when(self):
@@ -1404,7 +1404,7 @@
             with self.assertRaises(InvalidOptionError) as e:
                 self.get_config(['--foo'])
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               '--foo is not available in this configuration')
 
         # Cannot depend on an option defined in a only_when block, because we
@@ -1415,7 +1415,7 @@
             with self.assertRaises(ConfigureError) as e:
                 self.get_config()
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               '@depends function needs the same `when` as '
                               'options it depends on')
 
@@ -1432,7 +1432,7 @@
             with self.assertRaises(InvalidOptionError) as e:
                 self.get_config()
 
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               '--foo is not available in this configuration')
 
         # And similarly doesn't fail when the condition is true.
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_lint.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_lint.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_lint.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_lint.py	2020-04-04 03:49:13.740870666 +0900
@@ -2,9 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
 
-from StringIO import StringIO
+
+from io import StringIO
 import contextlib
 import os
 import sys
@@ -44,7 +44,7 @@
             yield e
 
         _, _, tb = sys.exc_info()
-        self.assertEquals(
+        self.assertEqual(
             traceback.extract_tb(tb)[-1][:2],
             (mozpath.join(test_data_path, 'moz.configure'), line))
 
@@ -79,7 +79,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The dependency on `--help` is unused")
 
         with self.assertRaisesFromLine(ConfigureError, 3) as e:
@@ -97,7 +97,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "Missing '--help' dependency because `bar` depends on '--help' and `foo`")
 
@@ -121,7 +121,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             "Missing '--help' dependency because `bar` depends on '--help' and `foo`")
 
@@ -147,7 +147,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Missing '--help' dependency")
 
         with self.assertRaisesFromLine(ConfigureError, 3) as e:
@@ -166,7 +166,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Missing '--help' dependency")
 
         with self.assertRaisesFromLine(ConfigureError, 3) as e:
@@ -181,7 +181,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Missing '--help' dependency")
 
         # This would have failed with "Missing '--help' dependency"
@@ -214,7 +214,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "Missing '--help' dependency")
 
         # There is a default restricted `os` module when there is no explicit
@@ -241,7 +241,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The dependency on `--foo` is unused")
 
         with self.assertRaisesFromLine(ConfigureError, 5) as e:
@@ -257,7 +257,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The dependency on `bar` is unused")
 
         with self.assertRaisesFromLine(ConfigureError, 2) as e:
@@ -270,7 +270,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The dependency on `<lambda>` is unused")
 
         with self.assertRaisesFromLine(ConfigureError, 9) as e:
@@ -290,7 +290,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The dependency on `qux` is unused")
 
     def test_default_enable(self):
@@ -304,7 +304,7 @@
                 option('--enable-foo', default=True, help='foo')
             '''):
                 self.lint_test()
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           '--disable-foo should be used instead of '
                           '--enable-foo with default=True')
 
@@ -319,7 +319,7 @@
                 option('--disable-foo', default=False, help='foo')
             '''):
                 self.lint_test()
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           '--enable-foo should be used instead of '
                           '--disable-foo with default=False')
 
@@ -334,7 +334,7 @@
                 option('--with-foo', default=True, help='foo')
             '''):
                 self.lint_test()
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           '--without-foo should be used instead of '
                           '--with-foo with default=True')
 
@@ -349,7 +349,7 @@
                 option('--without-foo', default=False, help='foo')
             '''):
                 self.lint_test()
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           '--with-foo should be used instead of '
                           '--without-foo with default=False')
 
@@ -369,7 +369,7 @@
                        help='Enable bar')
             '''):
                 self.lint_test()
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           '`help` should contain "{Enable|Disable}" because of '
                           'non-constant default')
 
@@ -385,7 +385,7 @@
             '''):
                 self.lint_test()
 
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "global name 'unknown' is not defined")
 
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_moz_configure.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_moz_configure.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_moz_configure.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_moz_configure.py	2020-04-04 03:49:13.830870674 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import sys
 
@@ -147,7 +147,7 @@
                 self.version = version
 
             def __call__(self, stdin, args):
-                this.assertEquals(args, ('-version',))
+                this.assertEqual(args, ('-version',))
                 return 0, self.version, ''
 
         def check_nsis_version(version):
@@ -162,13 +162,13 @@
         with self.assertRaises(SystemExit) as e:
             check_nsis_version('v3.0a2')
 
-        self.assertEquals(check_nsis_version('v3.0b1'), '3.0b1')
-        self.assertEquals(check_nsis_version('v3.0b2'), '3.0b2')
-        self.assertEquals(check_nsis_version('v3.0rc1'), '3.0rc1')
-        self.assertEquals(check_nsis_version('v3.0'), '3.0')
-        self.assertEquals(check_nsis_version('v3.0-2'), '3.0')
-        self.assertEquals(check_nsis_version('v3.0.1'), '3.0')
-        self.assertEquals(check_nsis_version('v3.1'), '3.1')
+        self.assertEqual(check_nsis_version('v3.0b1'), '3.0b1')
+        self.assertEqual(check_nsis_version('v3.0b2'), '3.0b2')
+        self.assertEqual(check_nsis_version('v3.0rc1'), '3.0rc1')
+        self.assertEqual(check_nsis_version('v3.0'), '3.0')
+        self.assertEqual(check_nsis_version('v3.0-2'), '3.0')
+        self.assertEqual(check_nsis_version('v3.0.1'), '3.0')
+        self.assertEqual(check_nsis_version('v3.1'), '3.1')
 
 
 if __name__ == '__main__':
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_options.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_options.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_options.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_options.py	2020-04-04 03:49:14.437870730 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import unittest
 
@@ -28,139 +28,139 @@
 class TestOption(unittest.TestCase):
     def test_option(self):
         option = Option('--option')
-        self.assertEquals(option.prefix, '')
-        self.assertEquals(option.name, 'option')
-        self.assertEquals(option.env, None)
+        self.assertEqual(option.prefix, '')
+        self.assertEqual(option.name, 'option')
+        self.assertEqual(option.env, None)
         self.assertFalse(option.default)
 
         option = Option('--enable-option')
-        self.assertEquals(option.prefix, 'enable')
-        self.assertEquals(option.name, 'option')
-        self.assertEquals(option.env, None)
+        self.assertEqual(option.prefix, 'enable')
+        self.assertEqual(option.name, 'option')
+        self.assertEqual(option.env, None)
         self.assertFalse(option.default)
 
         option = Option('--disable-option')
-        self.assertEquals(option.prefix, 'disable')
-        self.assertEquals(option.name, 'option')
-        self.assertEquals(option.env, None)
+        self.assertEqual(option.prefix, 'disable')
+        self.assertEqual(option.name, 'option')
+        self.assertEqual(option.env, None)
         self.assertTrue(option.default)
 
         option = Option('--with-option')
-        self.assertEquals(option.prefix, 'with')
-        self.assertEquals(option.name, 'option')
-        self.assertEquals(option.env, None)
+        self.assertEqual(option.prefix, 'with')
+        self.assertEqual(option.name, 'option')
+        self.assertEqual(option.env, None)
         self.assertFalse(option.default)
 
         option = Option('--without-option')
-        self.assertEquals(option.prefix, 'without')
-        self.assertEquals(option.name, 'option')
-        self.assertEquals(option.env, None)
+        self.assertEqual(option.prefix, 'without')
+        self.assertEqual(option.name, 'option')
+        self.assertEqual(option.env, None)
         self.assertTrue(option.default)
 
         option = Option('--without-option-foo', env='MOZ_OPTION')
-        self.assertEquals(option.env, 'MOZ_OPTION')
+        self.assertEqual(option.env, 'MOZ_OPTION')
 
         option = Option(env='MOZ_OPTION')
-        self.assertEquals(option.prefix, '')
-        self.assertEquals(option.name, None)
-        self.assertEquals(option.env, 'MOZ_OPTION')
+        self.assertEqual(option.prefix, '')
+        self.assertEqual(option.name, None)
+        self.assertEqual(option.env, 'MOZ_OPTION')
         self.assertFalse(option.default)
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=0, default=('a',))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=1, default=())
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'default must be a bool, a string or a tuple of strings')
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=1, default=True)
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=1, default=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=2, default=())
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'default must be a bool, a string or a tuple of strings')
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=2, default=True)
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=2, default=('a',))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs='?', default=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs='+', default=())
-        self.assertEquals(
+        self.assertEqual(
             e.exception.message,
             'default must be a bool, a string or a tuple of strings')
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs='+', default=True)
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         # --disable options with a nargs value that requires at least one
         # argument need to be given a default.
         with self.assertRaises(InvalidOptionError) as e:
             Option('--disable-option', nargs=1)
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--disable-option', nargs='+')
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
         # Test nargs inference from default value
         option = Option('--with-foo', default=True)
-        self.assertEquals(option.nargs, 0)
+        self.assertEqual(option.nargs, 0)
 
         option = Option('--with-foo', default=False)
-        self.assertEquals(option.nargs, 0)
+        self.assertEqual(option.nargs, 0)
 
         option = Option('--with-foo', default='a')
-        self.assertEquals(option.nargs, '?')
+        self.assertEqual(option.nargs, '?')
 
         option = Option('--with-foo', default=('a',))
-        self.assertEquals(option.nargs, '?')
+        self.assertEqual(option.nargs, '?')
 
         option = Option('--with-foo', default=('a', 'b'))
-        self.assertEquals(option.nargs, '*')
+        self.assertEqual(option.nargs, '*')
 
         option = Option(env='FOO', default=True)
-        self.assertEquals(option.nargs, 0)
+        self.assertEqual(option.nargs, 0)
 
         option = Option(env='FOO', default=False)
-        self.assertEquals(option.nargs, 0)
+        self.assertEqual(option.nargs, 0)
 
         option = Option(env='FOO', default='a')
-        self.assertEquals(option.nargs, '?')
+        self.assertEqual(option.nargs, '?')
 
         option = Option(env='FOO', default=('a',))
-        self.assertEquals(option.nargs, '?')
+        self.assertEqual(option.nargs, '?')
 
         option = Option(env='FOO', default=('a', 'b'))
-        self.assertEquals(option.nargs, '*')
+        self.assertEqual(option.nargs, '*')
 
     def test_option_option(self):
         for option in (
@@ -170,70 +170,70 @@
             '--with-option',
             '--without-option',
         ):
-            self.assertEquals(Option(option).option, option)
-            self.assertEquals(Option(option, env='FOO').option, option)
+            self.assertEqual(Option(option).option, option)
+            self.assertEqual(Option(option, env='FOO').option, option)
 
             opt = Option(option, default=False)
-            self.assertEquals(opt.option,
+            self.assertEqual(opt.option,
                               option.replace('-disable-', '-enable-')
                                     .replace('-without-', '-with-'))
 
             opt = Option(option, default=True)
-            self.assertEquals(opt.option,
+            self.assertEqual(opt.option,
                               option.replace('-enable-', '-disable-')
                                     .replace('-with-', '-without-'))
 
-        self.assertEquals(Option(env='FOO').option, 'FOO')
+        self.assertEqual(Option(env='FOO').option, 'FOO')
 
     def test_option_choices(self):
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=3, choices=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           'Not enough `choices` for `nargs`')
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--without-option', nargs=1, choices=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           'A `default` must be given along with `choices`')
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--without-option', nargs='+', choices=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           'A `default` must be given along with `choices`')
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--without-option', default='c', choices=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The `default` value must be one of 'a', 'b'")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--without-option', default=('a', 'c',), choices=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The `default` value must be one of 'a', 'b'")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--without-option', default=('c',), choices=('a', 'b'))
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The `default` value must be one of 'a', 'b'")
 
         option = Option('--with-option', nargs='+', choices=('a', 'b'))
         with self.assertRaises(InvalidOptionError) as e:
             option.get_value('--with-option=c')
-        self.assertEquals(e.exception.message, "'c' is not one of 'a', 'b'")
+        self.assertEqual(e.exception.message, "'c' is not one of 'a', 'b'")
 
         value = option.get_value('--with-option=b,a')
         self.assertTrue(value)
-        self.assertEquals(PositiveOptionValue(('b', 'a')), value)
+        self.assertEqual(PositiveOptionValue(('b', 'a')), value)
 
         option = Option('--without-option', nargs='*', default='a',
                         choices=('a', 'b'))
         with self.assertRaises(InvalidOptionError) as e:
             option.get_value('--with-option=c')
-        self.assertEquals(e.exception.message, "'c' is not one of 'a', 'b'")
+        self.assertEqual(e.exception.message, "'c' is not one of 'a', 'b'")
 
         value = option.get_value('--with-option=b,a')
         self.assertTrue(value)
-        self.assertEquals(PositiveOptionValue(('b', 'a')), value)
+        self.assertEqual(PositiveOptionValue(('b', 'a')), value)
 
         # Test nargs inference from choices
         option = Option('--with-option', choices=('a', 'b'))
@@ -244,37 +244,37 @@
                         choices=('a', 'b', 'c', 'd'))
 
         value = option.get_value('--with-option=+d')
-        self.assertEquals(PositiveOptionValue(('b', 'c', 'd')), value)
+        self.assertEqual(PositiveOptionValue(('b', 'c', 'd')), value)
 
         value = option.get_value('--with-option=-b')
-        self.assertEquals(PositiveOptionValue(('c',)), value)
+        self.assertEqual(PositiveOptionValue(('c',)), value)
 
         value = option.get_value('--with-option=-b,+d')
-        self.assertEquals(PositiveOptionValue(('c','d')), value)
+        self.assertEqual(PositiveOptionValue(('c','d')), value)
 
         # Adding something that is in the default is fine
         value = option.get_value('--with-option=+b')
-        self.assertEquals(PositiveOptionValue(('b', 'c')), value)
+        self.assertEqual(PositiveOptionValue(('b', 'c')), value)
 
         # Removing something that is not in the default is fine, as long as it
         # is one of the choices
         value = option.get_value('--with-option=-a')
-        self.assertEquals(PositiveOptionValue(('b', 'c')), value)
+        self.assertEqual(PositiveOptionValue(('b', 'c')), value)
 
         with self.assertRaises(InvalidOptionError) as e:
             option.get_value('--with-option=-e')
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "'e' is not one of 'a', 'b', 'c', 'd'")
 
         # Other "not a choice" errors.
         with self.assertRaises(InvalidOptionError) as e:
             option.get_value('--with-option=+e')
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "'e' is not one of 'a', 'b', 'c', 'd'")
 
         with self.assertRaises(InvalidOptionError) as e:
             option.get_value('--with-option=e')
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "'e' is not one of 'a', 'b', 'c', 'd'")
 
     def test_option_value_compare(self):
@@ -294,7 +294,7 @@
 
         # For usability reasons, we raise TypeError when attempting to compare
         # against a non-tuple.
-        with self.assertRaisesRegexp(TypeError, 'cannot compare a'):
+        with self.assertRaisesRegex(TypeError, 'cannot compare a'):
             val == 'foo'
 
         # But we allow empty option values to compare otherwise we can't
@@ -313,36 +313,36 @@
 
     def test_option_value_format(self):
         val = PositiveOptionValue()
-        self.assertEquals('--with-value', val.format('--with-value'))
-        self.assertEquals('--with-value', val.format('--without-value'))
-        self.assertEquals('--enable-value', val.format('--enable-value'))
-        self.assertEquals('--enable-value', val.format('--disable-value'))
-        self.assertEquals('--value', val.format('--value'))
-        self.assertEquals('VALUE=1', val.format('VALUE'))
+        self.assertEqual('--with-value', val.format('--with-value'))
+        self.assertEqual('--with-value', val.format('--without-value'))
+        self.assertEqual('--enable-value', val.format('--enable-value'))
+        self.assertEqual('--enable-value', val.format('--disable-value'))
+        self.assertEqual('--value', val.format('--value'))
+        self.assertEqual('VALUE=1', val.format('VALUE'))
 
         val = PositiveOptionValue(('a',))
-        self.assertEquals('--with-value=a', val.format('--with-value'))
-        self.assertEquals('--with-value=a', val.format('--without-value'))
-        self.assertEquals('--enable-value=a', val.format('--enable-value'))
-        self.assertEquals('--enable-value=a', val.format('--disable-value'))
-        self.assertEquals('--value=a', val.format('--value'))
-        self.assertEquals('VALUE=a', val.format('VALUE'))
+        self.assertEqual('--with-value=a', val.format('--with-value'))
+        self.assertEqual('--with-value=a', val.format('--without-value'))
+        self.assertEqual('--enable-value=a', val.format('--enable-value'))
+        self.assertEqual('--enable-value=a', val.format('--disable-value'))
+        self.assertEqual('--value=a', val.format('--value'))
+        self.assertEqual('VALUE=a', val.format('VALUE'))
 
         val = PositiveOptionValue(('a', 'b'))
-        self.assertEquals('--with-value=a,b', val.format('--with-value'))
-        self.assertEquals('--with-value=a,b', val.format('--without-value'))
-        self.assertEquals('--enable-value=a,b', val.format('--enable-value'))
-        self.assertEquals('--enable-value=a,b', val.format('--disable-value'))
-        self.assertEquals('--value=a,b', val.format('--value'))
-        self.assertEquals('VALUE=a,b', val.format('VALUE'))
+        self.assertEqual('--with-value=a,b', val.format('--with-value'))
+        self.assertEqual('--with-value=a,b', val.format('--without-value'))
+        self.assertEqual('--enable-value=a,b', val.format('--enable-value'))
+        self.assertEqual('--enable-value=a,b', val.format('--disable-value'))
+        self.assertEqual('--value=a,b', val.format('--value'))
+        self.assertEqual('VALUE=a,b', val.format('VALUE'))
 
         val = NegativeOptionValue()
-        self.assertEquals('--without-value', val.format('--with-value'))
-        self.assertEquals('--without-value', val.format('--without-value'))
-        self.assertEquals('--disable-value', val.format('--enable-value'))
-        self.assertEquals('--disable-value', val.format('--disable-value'))
-        self.assertEquals('', val.format('--value'))
-        self.assertEquals('VALUE=', val.format('VALUE'))
+        self.assertEqual('--without-value', val.format('--with-value'))
+        self.assertEqual('--without-value', val.format('--without-value'))
+        self.assertEqual('--disable-value', val.format('--enable-value'))
+        self.assertEqual('--disable-value', val.format('--disable-value'))
+        self.assertEqual('', val.format('--value'))
+        self.assertEqual('VALUE=', val.format('VALUE'))
 
     def test_option_value(self, name='option', nargs=0, default=None):
         disabled = name.startswith(('disable-', 'without-'))
@@ -359,28 +359,28 @@
 
         if nargs in (0, '?', '*') or disabled:
             value = option.get_value('--%s' % name, 'option')
-            self.assertEquals(value, posOptionValue())
-            self.assertEquals(value.origin, 'option')
+            self.assertEqual(value, posOptionValue())
+            self.assertEqual(value.origin, 'option')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('--%s' % name)
             if nargs == 1:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes 1 value' % name)
             elif nargs == '+':
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes 1 or more values' % name)
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes 2 values' % name)
 
         value = option.get_value('')
-        self.assertEquals(value, defaultValue)
-        self.assertEquals(value.origin, 'default')
+        self.assertEqual(value, defaultValue)
+        self.assertEqual(value.origin, 'default')
 
         value = option.get_value(None)
-        self.assertEquals(value, defaultValue)
-        self.assertEquals(value.origin, 'default')
+        self.assertEqual(value, defaultValue)
+        self.assertEqual(value.origin, 'default')
 
         with self.assertRaises(AssertionError):
             value = option.get_value('MOZ_OPTION=', 'environment')
@@ -393,47 +393,47 @@
 
         if nargs in (1, '?', '*', '+') and not disabled:
             value = option.get_value('--%s=' % name, 'option')
-            self.assertEquals(value, PositiveOptionValue(('',)))
-            self.assertEquals(value.origin, 'option')
+            self.assertEqual(value, PositiveOptionValue(('',)))
+            self.assertEqual(value.origin, 'option')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('--%s=' % name)
             if disabled:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'Cannot pass a value to --%s' % name)
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes %d values' % (name, nargs))
 
         if nargs in (1, '?', '*', '+') and not disabled:
             value = option.get_value('--%s=foo' % name, 'option')
-            self.assertEquals(value, PositiveOptionValue(('foo',)))
-            self.assertEquals(value.origin, 'option')
+            self.assertEqual(value, PositiveOptionValue(('foo',)))
+            self.assertEqual(value.origin, 'option')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('--%s=foo' % name)
             if disabled:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'Cannot pass a value to --%s' % name)
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes %d values' % (name, nargs))
 
         if nargs in (2, '*', '+') and not disabled:
             value = option.get_value('--%s=foo,bar' % name, 'option')
-            self.assertEquals(value, PositiveOptionValue(('foo', 'bar')))
-            self.assertEquals(value.origin, 'option')
+            self.assertEqual(value, PositiveOptionValue(('foo', 'bar')))
+            self.assertEqual(value.origin, 'option')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('--%s=foo,bar' % name, 'option')
             if disabled:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'Cannot pass a value to --%s' % name)
             elif nargs == '?':
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes 0 or 1 values' % name)
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes %d value%s'
                                   % (name, nargs, 's' if nargs != 1 else ''))
 
@@ -441,59 +441,59 @@
                         default=default)
         if nargs in (0, '?', '*') or disabled:
             value = option.get_value('--%s' % name, 'option')
-            self.assertEquals(value, posOptionValue())
-            self.assertEquals(value.origin, 'option')
+            self.assertEqual(value, posOptionValue())
+            self.assertEqual(value.origin, 'option')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('--%s' % name)
             if disabled:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'Cannot pass a value to --%s' % name)
             elif nargs == '+':
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes 1 or more values' % name)
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes %d value%s'
                                   % (name, nargs, 's' if nargs != 1 else ''))
 
         value = option.get_value('')
-        self.assertEquals(value, defaultValue)
-        self.assertEquals(value.origin, 'default')
+        self.assertEqual(value, defaultValue)
+        self.assertEqual(value.origin, 'default')
 
         value = option.get_value(None)
-        self.assertEquals(value, defaultValue)
-        self.assertEquals(value.origin, 'default')
+        self.assertEqual(value, defaultValue)
+        self.assertEqual(value.origin, 'default')
 
         value = option.get_value('MOZ_OPTION=', 'environment')
-        self.assertEquals(value, NegativeOptionValue())
-        self.assertEquals(value.origin, 'environment')
+        self.assertEqual(value, NegativeOptionValue())
+        self.assertEqual(value.origin, 'environment')
 
         if nargs in (0, '?', '*'):
             value = option.get_value('MOZ_OPTION=1', 'environment')
-            self.assertEquals(value, PositiveOptionValue())
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value, PositiveOptionValue())
+            self.assertEqual(value.origin, 'environment')
         elif nargs in (1, '+'):
             value = option.get_value('MOZ_OPTION=1', 'environment')
-            self.assertEquals(value, PositiveOptionValue(('1',)))
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value, PositiveOptionValue(('1',)))
+            self.assertEqual(value.origin, 'environment')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('MOZ_OPTION=1', 'environment')
-            self.assertEquals(e.exception.message, 'MOZ_OPTION takes 2 values')
+            self.assertEqual(e.exception.message, 'MOZ_OPTION takes 2 values')
 
         if nargs in (1, '?', '*', '+') and not disabled:
             value = option.get_value('--%s=' % name, 'option')
-            self.assertEquals(value, PositiveOptionValue(('',)))
-            self.assertEquals(value.origin, 'option')
+            self.assertEqual(value, PositiveOptionValue(('',)))
+            self.assertEqual(value.origin, 'option')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('--%s=' % name, 'option')
             if disabled:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'Cannot pass a value to --%s' % name)
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s takes %d values' % (name, nargs))
 
         with self.assertRaises(AssertionError):
@@ -501,26 +501,26 @@
 
         if nargs in (1, '?', '*', '+'):
             value = option.get_value('MOZ_OPTION=foo', 'environment')
-            self.assertEquals(value, PositiveOptionValue(('foo',)))
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value, PositiveOptionValue(('foo',)))
+            self.assertEqual(value.origin, 'environment')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('MOZ_OPTION=foo', 'environment')
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               'MOZ_OPTION takes %d values' % nargs)
 
         if nargs in (2, '*', '+'):
             value = option.get_value('MOZ_OPTION=foo,bar', 'environment')
-            self.assertEquals(value, PositiveOptionValue(('foo', 'bar')))
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value, PositiveOptionValue(('foo', 'bar')))
+            self.assertEqual(value.origin, 'environment')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('MOZ_OPTION=foo,bar', 'environment')
             if nargs == '?':
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'MOZ_OPTION takes 0 or 1 values')
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'MOZ_OPTION takes %d value%s'
                                   % (nargs, 's' if nargs != 1 else ''))
 
@@ -532,26 +532,26 @@
             env_option.get_value('--%s' % name)
 
         value = env_option.get_value('')
-        self.assertEquals(value, defaultValue)
-        self.assertEquals(value.origin, 'default')
+        self.assertEqual(value, defaultValue)
+        self.assertEqual(value.origin, 'default')
 
         value = env_option.get_value('MOZ_OPTION=', 'environment')
-        self.assertEquals(value, negOptionValue())
-        self.assertEquals(value.origin, 'environment')
+        self.assertEqual(value, negOptionValue())
+        self.assertEqual(value.origin, 'environment')
 
         if nargs in (0, '?', '*'):
             value = env_option.get_value('MOZ_OPTION=1', 'environment')
-            self.assertEquals(value, posOptionValue())
+            self.assertEqual(value, posOptionValue())
             self.assertTrue(value)
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value.origin, 'environment')
         elif nargs in (1, '+'):
             value = env_option.get_value('MOZ_OPTION=1', 'environment')
-            self.assertEquals(value, PositiveOptionValue(('1',)))
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value, PositiveOptionValue(('1',)))
+            self.assertEqual(value.origin, 'environment')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 env_option.get_value('MOZ_OPTION=1', 'environment')
-            self.assertEquals(e.exception.message, 'MOZ_OPTION takes 2 values')
+            self.assertEqual(e.exception.message, 'MOZ_OPTION takes 2 values')
 
         with self.assertRaises(AssertionError) as e:
             env_option.get_value('--%s' % name)
@@ -561,26 +561,26 @@
 
         if nargs in (1, '?', '*', '+'):
             value = env_option.get_value('MOZ_OPTION=foo', 'environment')
-            self.assertEquals(value, PositiveOptionValue(('foo',)))
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value, PositiveOptionValue(('foo',)))
+            self.assertEqual(value.origin, 'environment')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 env_option.get_value('MOZ_OPTION=foo', 'environment')
-            self.assertEquals(e.exception.message,
+            self.assertEqual(e.exception.message,
                               'MOZ_OPTION takes %d values' % nargs)
 
         if nargs in (2, '*', '+'):
             value = env_option.get_value('MOZ_OPTION=foo,bar', 'environment')
-            self.assertEquals(value, PositiveOptionValue(('foo', 'bar')))
-            self.assertEquals(value.origin, 'environment')
+            self.assertEqual(value, PositiveOptionValue(('foo', 'bar')))
+            self.assertEqual(value.origin, 'environment')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 env_option.get_value('MOZ_OPTION=foo,bar', 'environment')
             if nargs == '?':
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'MOZ_OPTION takes 0 or 1 values')
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   'MOZ_OPTION takes %d value%s'
                                   % (nargs, 's' if nargs != 1 else ''))
 
@@ -592,28 +592,28 @@
                                         default=default)
 
         value = option.get_value('--%s-option' % disable, 'option')
-        self.assertEquals(value, NegativeOptionValue())
-        self.assertEquals(value.origin, 'option')
+        self.assertEqual(value, NegativeOptionValue())
+        self.assertEqual(value.origin, 'option')
 
         option = self.test_option_value('%s-option' % disable, nargs=nargs,
                                         default=default)
 
         if nargs in (0, '?', '*'):
             value = option.get_value('--%s-option' % enable, 'option')
-            self.assertEquals(value, PositiveOptionValue())
-            self.assertEquals(value.origin, 'option')
+            self.assertEqual(value, PositiveOptionValue())
+            self.assertEqual(value.origin, 'option')
         else:
             with self.assertRaises(InvalidOptionError) as e:
                 option.get_value('--%s-option' % enable, 'option')
             if nargs == 1:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s-option takes 1 value' % enable)
             elif nargs == '+':
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s-option takes 1 or more values'
                                   % enable)
             else:
-                self.assertEquals(e.exception.message,
+                self.assertEqual(e.exception.message,
                                   '--%s-option takes 2 values' % enable)
 
     def test_option_value_with(self):
@@ -622,12 +622,12 @@
     def test_option_value_invalid_nargs(self):
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs='foo')
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "nargs must be a positive integer, '?', '*' or '+'")
 
         with self.assertRaises(InvalidOptionError) as e:
             Option('--option', nargs=-2)
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "nargs must be a positive integer, '?', '*' or '+'")
 
     def test_option_value_nargs_1(self):
@@ -638,7 +638,7 @@
         # A default is required
         with self.assertRaises(InvalidOptionError) as e:
             Option('--disable-option', nargs=1)
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
     def test_option_value_nargs_2(self):
@@ -649,7 +649,7 @@
         # A default is required
         with self.assertRaises(InvalidOptionError) as e:
             Option('--disable-option', nargs=2)
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
     def test_option_value_nargs_0_or_1(self):
@@ -676,7 +676,7 @@
         # A default is required
         with self.assertRaises(InvalidOptionError) as e:
             Option('--disable-option', nargs='+')
-        self.assertEquals(e.exception.message,
+        self.assertEqual(e.exception.message,
                           "The given `default` doesn't satisfy `nargs`")
 
 
@@ -684,21 +684,21 @@
     def test_basic(self):
         helper = CommandLineHelper({}, ['cmd', '--foo', '--bar'])
 
-        self.assertEquals(['--foo', '--bar'], list(helper))
+        self.assertEqual(['--foo', '--bar'], list(helper))
 
         helper.add('--enable-qux')
 
-        self.assertEquals(['--foo', '--bar', '--enable-qux'], list(helper))
+        self.assertEqual(['--foo', '--bar', '--enable-qux'], list(helper))
 
         value, option = helper.handle(Option('--bar'))
-        self.assertEquals(['--foo', '--enable-qux'], list(helper))
-        self.assertEquals(PositiveOptionValue(), value)
-        self.assertEquals('--bar', option)
+        self.assertEqual(['--foo', '--enable-qux'], list(helper))
+        self.assertEqual(PositiveOptionValue(), value)
+        self.assertEqual('--bar', option)
 
         value, option = helper.handle(Option('--baz'))
-        self.assertEquals(['--foo', '--enable-qux'], list(helper))
-        self.assertEquals(NegativeOptionValue(), value)
-        self.assertEquals(None, option)
+        self.assertEqual(['--foo', '--enable-qux'], list(helper))
+        self.assertEqual(NegativeOptionValue(), value)
+        self.assertEqual(None, option)
 
         with self.assertRaises(AssertionError):
             CommandLineHelper({}, ['--foo', '--bar'])
@@ -707,89 +707,89 @@
         foo = Option('--with-foo', nargs='*')
         helper = CommandLineHelper({}, ['cmd', '--with-foo=a,b'])
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b')), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--with-foo=a,b', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b')), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--with-foo=a,b', option)
 
         helper = CommandLineHelper({}, ['cmd', '--with-foo=a,b',
                                         '--without-foo'])
         value, option = helper.handle(foo)
-        self.assertEquals(NegativeOptionValue(), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--without-foo', option)
+        self.assertEqual(NegativeOptionValue(), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--without-foo', option)
 
         helper = CommandLineHelper({}, ['cmd', '--without-foo',
                                         '--with-foo=a,b'])
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b')), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--with-foo=a,b', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b')), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--with-foo=a,b', option)
 
         foo = Option('--with-foo', env='FOO', nargs='*')
         helper = CommandLineHelper({'FOO': ''}, ['cmd', '--with-foo=a,b'])
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b')), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--with-foo=a,b', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b')), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--with-foo=a,b', option)
 
         helper = CommandLineHelper({'FOO': 'a,b'}, ['cmd', '--without-foo'])
         value, option = helper.handle(foo)
-        self.assertEquals(NegativeOptionValue(), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--without-foo', option)
+        self.assertEqual(NegativeOptionValue(), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--without-foo', option)
 
         helper = CommandLineHelper({'FOO': ''}, ['cmd', '--with-bar=a,b'])
         value, option = helper.handle(foo)
-        self.assertEquals(NegativeOptionValue(), value)
-        self.assertEquals('environment', value.origin)
-        self.assertEquals('FOO=', option)
+        self.assertEqual(NegativeOptionValue(), value)
+        self.assertEqual('environment', value.origin)
+        self.assertEqual('FOO=', option)
 
         helper = CommandLineHelper({'FOO': 'a,b'}, ['cmd', '--without-bar'])
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b')), value)
-        self.assertEquals('environment', value.origin)
-        self.assertEquals('FOO=a,b', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b')), value)
+        self.assertEqual('environment', value.origin)
+        self.assertEqual('FOO=a,b', option)
 
         helper = CommandLineHelper({}, ['cmd', '--with-foo=a,b', 'FOO='])
         value, option = helper.handle(foo)
-        self.assertEquals(NegativeOptionValue(), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('FOO=', option)
+        self.assertEqual(NegativeOptionValue(), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('FOO=', option)
 
         helper = CommandLineHelper({}, ['cmd', '--without-foo', 'FOO=a,b'])
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b')), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('FOO=a,b', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b')), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('FOO=a,b', option)
 
         helper = CommandLineHelper({}, ['cmd', 'FOO=', '--with-foo=a,b'])
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b')), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--with-foo=a,b', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b')), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--with-foo=a,b', option)
 
         helper = CommandLineHelper({}, ['cmd', 'FOO=a,b', '--without-foo'])
         value, option = helper.handle(foo)
-        self.assertEquals(NegativeOptionValue(), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--without-foo', option)
+        self.assertEqual(NegativeOptionValue(), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--without-foo', option)
 
     def test_extra_args(self):
         foo = Option('--with-foo', env='FOO', nargs='*')
         helper = CommandLineHelper({}, ['cmd'])
         helper.add('FOO=a,b,c', 'other-origin')
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b', 'c')), value)
-        self.assertEquals('other-origin', value.origin)
-        self.assertEquals('FOO=a,b,c', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b', 'c')), value)
+        self.assertEqual('other-origin', value.origin)
+        self.assertEqual('FOO=a,b,c', option)
 
         helper = CommandLineHelper({}, ['cmd'])
         helper.add('FOO=a,b,c', 'other-origin')
         helper.add('--with-foo=a,b,c', 'other-origin')
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b', 'c')), value)
-        self.assertEquals('other-origin', value.origin)
-        self.assertEquals('--with-foo=a,b,c', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b', 'c')), value)
+        self.assertEqual('other-origin', value.origin)
+        self.assertEqual('--with-foo=a,b,c', option)
 
         # Adding conflicting options is not allowed.
         helper = CommandLineHelper({}, ['cmd'])
@@ -809,9 +809,9 @@
         # But adding the same is allowed.
         helper.add('FOO=a,b,c', 'other-origin')
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b', 'c')), value)
-        self.assertEquals('other-origin', value.origin)
-        self.assertEquals('FOO=a,b,c', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b', 'c')), value)
+        self.assertEqual('other-origin', value.origin)
+        self.assertEqual('FOO=a,b,c', option)
 
         # The same rule as above applies when using the option form vs. the
         # variable form. But we can't detect it when .add is called.
@@ -837,9 +837,9 @@
         helper.add('FOO=a,b,c', 'other-origin')
         helper.add('--with-foo=a,b,c', 'other-origin')
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(('a', 'b', 'c')), value)
-        self.assertEquals('other-origin', value.origin)
-        self.assertEquals('--with-foo=a,b,c', option)
+        self.assertEqual(PositiveOptionValue(('a', 'b', 'c')), value)
+        self.assertEqual('other-origin', value.origin)
+        self.assertEqual('--with-foo=a,b,c', option)
 
         # Conflicts are also not allowed against what is in the
         # environment/on the command line.
@@ -869,19 +869,19 @@
         foo = Option('--foo',
                      possible_origins=('command-line',))
         value, option = helper.handle(foo)
-        self.assertEquals(PositiveOptionValue(), value)
-        self.assertEquals('command-line', value.origin)
-        self.assertEquals('--foo', option)
+        self.assertEqual(PositiveOptionValue(), value)
+        self.assertEqual('command-line', value.origin)
+        self.assertEqual('--foo', option)
 
         bar = Option('--bar',
                      possible_origins=('mozconfig',))
-        with self.assertRaisesRegexp(InvalidOptionError,
+        with self.assertRaisesRegex(InvalidOptionError,
             "--bar can not be set by command-line. Values are accepted from: mozconfig"):
             helper.handle(bar)
 
         baz = Option(env='BAZ',
                      possible_origins=('implied',))
-        with self.assertRaisesRegexp(InvalidOptionError,
+        with self.assertRaisesRegex(InvalidOptionError,
             "BAZ=1 can not be set by environment. Values are accepted from: implied"):
             helper.handle(baz)
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_toolchain_configure.py	2020-04-04 03:49:15.201870800 +0900
@@ -2,12 +2,12 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import logging
 import os
 
-from StringIO import StringIO
+from io import StringIO
 
 from mozunit import main
 
@@ -378,9 +378,9 @@
                 compiler = sandbox._value_for(sandbox[var])
                 # Add var on both ends to make it clear which of the
                 # variables is failing the test when that happens.
-                self.assertEquals((var, compiler), (var, result))
+                self.assertEqual((var, compiler), (var, result))
             except SystemExit:
-                self.assertEquals((var, result),
+                self.assertEqual((var, result),
                                   (var, self.out.getvalue().strip()))
                 return
 
@@ -419,7 +419,7 @@
             'RUST_LIB_SUFFIX',
             'OBJ_SUFFIX',
         ):
-            self.assertEquals('%s=%s' % (k, sandbox.get_config(k)),
+            self.assertEqual('%s=%s' % (k, sandbox.get_config(k)),
                               '%s=%s' % (k, library_name_info[k]))
 
 
@@ -619,7 +619,7 @@
         # We'll try gcc and clang, but since there is no gcc (gcc-x.y doesn't
         # count), find clang.
         paths = {
-            k: v for k, v in self.PATHS.iteritems()
+            k: v for k, v in self.PATHS.items()
             if os.path.basename(k) not in ('gcc', 'g++')
         }
         self.do_toolchain_test(paths, {
@@ -650,7 +650,7 @@
         # Even if there are gcc-x.y or clang-x.y compilers available, we
         # don't try them. This could be considered something to improve.
         paths = {
-            k: v for k, v in self.PATHS.iteritems()
+            k: v for k, v in self.PATHS.items()
             if os.path.basename(k) not in ('gcc', 'g++', 'clang', 'clang++')
         }
         self.do_toolchain_test(paths, {
@@ -841,7 +841,7 @@
     def test_not_gcc(self):
         # We won't pick GCC if it's the only thing available.
         paths = {
-            k: v for k, v in self.PATHS.iteritems()
+            k: v for k, v in self.PATHS.items()
             if os.path.basename(k) not in ('clang', 'clang++')
         }
         self.do_toolchain_test(paths, {
@@ -954,7 +954,7 @@
     def test_gcc(self):
         # We'll pick GCC if msvc and clang-cl can't be found.
         paths = {
-            k: v for k, v in self.PATHS.iteritems()
+            k: v for k, v in self.PATHS.items()
             if os.path.basename(k) not in ('cl', 'clang-cl')
         }
         self.do_toolchain_test(paths, {
@@ -973,7 +973,7 @@
     def test_clang(self):
         # We'll pick clang if nothing else is found.
         paths = {
-            k: v for k, v in self.PATHS.iteritems()
+            k: v for k, v in self.PATHS.items()
             if os.path.basename(k) not in ('cl', 'clang-cl', 'gcc')
         }
         self.do_toolchain_test(paths, {
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_toolchain_helpers.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_toolchain_helpers.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_toolchain_helpers.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_toolchain_helpers.py	2020-04-04 03:49:15.412870820 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import copy
 import re
@@ -10,7 +10,7 @@
 import unittest
 
 from fnmatch import fnmatch
-from StringIO import StringIO
+from io import StringIO
 from textwrap import dedent
 
 from mozunit import (
@@ -43,7 +43,7 @@
         # Hack around it enough that the configure tests work properly.
         context = self.context
         def normalize_numbers(value):
-            if isinstance(value, types.StringTypes):
+            if isinstance(value, (str,)):
                 if value[-1:] == 'L' and value[:-1].isdigit():
                     value = int(value[:-1])
             return value
@@ -53,7 +53,7 @@
             return self.HAS_FEATURE_OR_BUILTIN.sub(r'\1\2', expr)
         self.context = self.Context(
             (normalize_has_feature_or_builtin(k), normalize_numbers(v))
-            for k, v in context.iteritems()
+            for k, v in context.items()
         )
         try:
             return Preprocessor.do_if(
@@ -95,7 +95,7 @@
         input.name = 'foo'
         pp.do_include(input)
 
-        self.assertEquals(pp.out.getvalue(), '1 . 2 . c "D"')
+        self.assertEqual(pp.out.getvalue(), '1 . 2 . c "D"')
 
     def test_condition(self):
         pp = CompilerPreprocessor({
@@ -125,7 +125,7 @@
         input.name = 'foo'
         pp.do_include(input)
 
-        self.assertEquals('IFDEF_A\nIF_A\nIF_B\nIF_NOT_C\n', pp.out.getvalue())
+        self.assertEqual('IFDEF_A\nIF_A\nIF_B\nIF_NOT_C\n', pp.out.getvalue())
 
 
 class FakeCompiler(dict):
@@ -164,9 +164,9 @@
     '''
     def __init__(self, *definitions):
         for definition in definitions:
-            if all(not isinstance(d, dict) for d in definition.itervalues()):
+            if all(not isinstance(d, dict) for d in definition.values()):
                 definition = {None: definition}
-            for key, value in definition.iteritems():
+            for key, value in definition.items():
                 self.setdefault(key, {}).update(value)
 
     def __call__(self, stdin, args):
@@ -192,14 +192,14 @@
             pp = CompilerPreprocessor(self[None])
 
             def apply_defn(defn):
-                for k, v in defn.iteritems():
+                for k, v in defn.items():
                     if v is False:
                         if k in pp.context:
                             del pp.context[k]
                     else:
                         pp.context[k] = v
 
-            for glob, defn in self.iteritems():
+            for glob, defn in self.items():
                 if glob and not glob.startswith('-') and fnmatch(file, glob):
                     apply_defn(defn)
 
@@ -230,7 +230,7 @@
                 'A': '1',
                 'B': '2',
             })
-            self.assertEquals(compiler(None, ['-E', 'file']),
+            self.assertEqual(compiler(None, ['-E', 'file']),
                               (0, '1 2 C', ''))
 
             compiler = FakeCompiler({
@@ -252,25 +252,25 @@
                     'B': '42',
                 },
             })
-            self.assertEquals(compiler(None, ['-E', 'file']),
+            self.assertEqual(compiler(None, ['-E', 'file']),
                               (0, '1 2 C', ''))
-            self.assertEquals(compiler(None, ['-E', '-foo', 'file']),
+            self.assertEqual(compiler(None, ['-E', '-foo', 'file']),
                               (0, '1 2 foo', ''))
-            self.assertEquals(compiler(None, ['-E', '-bar', 'file']),
+            self.assertEqual(compiler(None, ['-E', '-bar', 'file']),
                               (0, '1 bar bar', ''))
-            self.assertEquals(compiler(None, ['-E', '-qux', 'file']),
+            self.assertEqual(compiler(None, ['-E', '-qux', 'file']),
                               (0, '1 B C', ''))
-            self.assertEquals(compiler(None, ['-E', '-foo', '-bar', 'file']),
+            self.assertEqual(compiler(None, ['-E', '-foo', '-bar', 'file']),
                               (0, '1 bar bar', ''))
-            self.assertEquals(compiler(None, ['-E', '-bar', '-foo', 'file']),
+            self.assertEqual(compiler(None, ['-E', '-bar', '-foo', 'file']),
                               (0, '1 bar foo', ''))
-            self.assertEquals(compiler(None, ['-E', '-bar', '-qux', 'file']),
+            self.assertEqual(compiler(None, ['-E', '-bar', '-qux', 'file']),
                               (0, '1 B bar', ''))
-            self.assertEquals(compiler(None, ['-E', '-qux', '-bar', 'file']),
+            self.assertEqual(compiler(None, ['-E', '-qux', '-bar', 'file']),
                               (0, '1 bar bar', ''))
-            self.assertEquals(compiler(None, ['-E', 'file.c']),
+            self.assertEqual(compiler(None, ['-E', 'file.c']),
                               (0, '1 42 C', ''))
-            self.assertEquals(compiler(None, ['-E', '-bar', 'file.c']),
+            self.assertEqual(compiler(None, ['-E', '-bar', 'file.c']),
                               (0, '1 bar bar', ''))
 
     def test_multiple_definitions(self):
@@ -281,7 +281,7 @@
             'C': 3,
         })
 
-        self.assertEquals(compiler, {
+        self.assertEqual(compiler, {
             None: {
                 'A': 1,
                 'B': 2,
@@ -296,7 +296,7 @@
             'C': 3,
         })
 
-        self.assertEquals(compiler, {
+        self.assertEqual(compiler, {
             None: {
                 'A': 1,
                 'B': 4,
@@ -316,7 +316,7 @@
             },
         })
 
-        self.assertEquals(compiler, {
+        self.assertEqual(compiler, {
             None: {
                 'A': 1,
                 'B': 4,
@@ -344,7 +344,7 @@
             },
         })
 
-        self.assertEquals(compiler, {
+        self.assertEqual(compiler, {
             None: {
                 'A': 1,
                 'B': 2,
@@ -390,7 +390,7 @@
     def __add__(self, other):
         assert isinstance(other, dict)
         result = copy.deepcopy(self.__dict__)
-        for k, v in other.iteritems():
+        for k, v in other.items():
             if k == 'flags':
                 flags = result.setdefault(k, [])
                 if isinstance(v, PrependFlags):
@@ -405,7 +405,7 @@
 class TestCompilerResult(unittest.TestCase):
     def test_compiler_result(self):
         result = CompilerResult()
-        self.assertEquals(result.__dict__, {
+        self.assertEqual(result.__dict__, {
             'wrapper': [],
             'compiler': mozpath.abspath(''),
             'version': '',
@@ -421,7 +421,7 @@
             language='C',
             flags=['-std=gnu99'],
         )
-        self.assertEquals(result.__dict__, {
+        self.assertEqual(result.__dict__, {
             'wrapper': [],
             'compiler': mozpath.abspath('/usr/bin/gcc'),
             'version': '4.2.1',
@@ -431,7 +431,7 @@
         })
 
         result2 = result + {'flags': ['-m32']}
-        self.assertEquals(result2.__dict__, {
+        self.assertEqual(result2.__dict__, {
             'wrapper': [],
             'compiler': mozpath.abspath('/usr/bin/gcc'),
             'version': '4.2.1',
@@ -440,14 +440,14 @@
             'flags': ['-std=gnu99', '-m32'],
         })
         # Original flags are untouched.
-        self.assertEquals(result.flags, ['-std=gnu99'])
+        self.assertEqual(result.flags, ['-std=gnu99'])
 
         result3 = result + {
             'compiler': '/usr/bin/gcc-4.7',
             'version': '4.7.3',
             'flags': ['-m32'],
         }
-        self.assertEquals(result3.__dict__, {
+        self.assertEqual(result3.__dict__, {
             'wrapper': [],
             'compiler': mozpath.abspath('/usr/bin/gcc-4.7'),
             'version': '4.7.3',
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_toolkit_moz_configure.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_toolkit_moz_configure.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_toolkit_moz_configure.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_toolkit_moz_configure.py	2020-04-04 03:49:15.509870828 +0900
@@ -2,11 +2,11 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import os
 
-from StringIO import StringIO
+from io import StringIO
 from buildconfig import topsrcdir
 from common import BaseConfigureTest
 from mozunit import MockedOpen, main
@@ -32,10 +32,10 @@
             shell = mozpath.abspath('/bin/sh')
             return result.replace('CONFIG_SHELL=%s ' % shell, '')
 
-        self.assertEquals('--enable-application=browser',
+        self.assertEqual('--enable-application=browser',
                           get_value_for(['--enable-application=browser']))
 
-        self.assertEquals('--enable-application=browser '
+        self.assertEqual('--enable-application=browser '
                           'MOZ_VTUNE=1',
                           get_value_for(['--enable-application=browser',
                                          'MOZ_VTUNE=1']))
@@ -44,25 +44,25 @@
             environ={'MOZ_VTUNE': '1'},
             mozconfig='ac_add_options --enable-application=browser')
 
-        self.assertEquals('--enable-application=browser MOZ_VTUNE=1',
+        self.assertEqual('--enable-application=browser MOZ_VTUNE=1',
                           value)
 
         # --disable-js-shell is the default, so it's filtered out.
-        self.assertEquals('--enable-application=browser',
+        self.assertEqual('--enable-application=browser',
                           get_value_for(['--enable-application=browser',
                                          '--disable-js-shell']))
 
         # Normally, --without-foo would be filtered out because that's the
         # default, but since it is a (fake) old-configure option, it always
         # appears.
-        self.assertEquals('--enable-application=browser --without-foo',
+        self.assertEqual('--enable-application=browser --without-foo',
                           get_value_for(['--enable-application=browser',
                                          '--without-foo']))
-        self.assertEquals('--enable-application=browser --with-foo',
+        self.assertEqual('--enable-application=browser --with-foo',
                           get_value_for(['--enable-application=browser',
                                          '--with-foo']))
 
-        self.assertEquals("--enable-application=browser '--with-foo=foo bar'",
+        self.assertEqual("--enable-application=browser '--with-foo=foo bar'",
                           get_value_for(['--enable-application=browser',
                                          '--with-foo=foo bar']))
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_util.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_util.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/test/configure/test_util.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/test/configure/test_util.py	2020-04-04 03:49:15.793870855 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import logging
 import os
@@ -11,7 +11,7 @@
 import unittest
 import sys
 
-from StringIO import StringIO
+from io import StringIO
 
 from mozunit import main
 from mozpack import path as mozpath
@@ -434,11 +434,11 @@
         except SystemExit as e:
             status = e.code
 
-        self.assertEquals(status, 0)
+        self.assertEqual(status, 0)
         quote_char = "'"
         if getpreferredencoding().lower() == 'utf-8':
             quote_char = '\u00B4'.encode('utf-8')
-        self.assertEquals(out.getvalue().strip(), quote_char)
+        self.assertEqual(out.getvalue().strip(), quote_char)
 
 
 class TestVersion(unittest.TestCase):
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/testing.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/testing.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/testing.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/testing.py	2020-04-04 03:49:15.939870868 +0900
@@ -2,9 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
 
-import cPickle as pickle
+
+import pickle as pickle
 import os
 import sys
 
@@ -69,7 +69,7 @@
 WEB_PLATFORM_TESTS_FLAVORS = ('web-platform-tests',)
 
 def all_test_flavors():
-    return ([v[0] for v in TEST_MANIFESTS.values()] +
+    return ([v[0] for v in list(TEST_MANIFESTS.values())] +
             list(REFTEST_FLAVORS) +
             list(WEB_PLATFORM_TESTS_FLAVORS))
 
@@ -207,7 +207,7 @@
 def _make_install_manifest(topsrcdir, topobjdir, test_objs):
 
     flavor_info = {flavor: (root, prefix, install)
-                   for (flavor, root, prefix, install) in TEST_MANIFESTS.values()}
+                   for (flavor, root, prefix, install) in list(TEST_MANIFESTS.values())}
 
     converter = SupportFilesConverter()
     install_info = TestInstallInfo()
@@ -310,7 +310,7 @@
         paths_file = os.path.join(context.config.topsrcdir, "testing",
                                   "web-platform", "tests", "tools", "localpaths.py")
         _globals = {"__file__": paths_file}
-        execfile(paths_file, _globals)
+        exec(compile(open(paths_file, "rb").read(), paths_file, 'exec'), _globals)
         import manifest as wptmanifest
     finally:
         sys.path = old_path
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/util.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/util.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/util.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/util.py	2020-04-04 03:49:16.509870920 +0900
@@ -5,7 +5,7 @@
 # This file contains miscellaneous utility functions that don't belong anywhere
 # in particular.
 
-from __future__ import absolute_import, unicode_literals, print_function
+
 
 import argparse
 import collections
@@ -36,7 +36,7 @@
 if sys.version_info[0] == 3:
     str_type = str
 else:
-    str_type = basestring
+    str_type = str
 
 if sys.platform == 'win32':
     _kernel32 = ctypes.windll.kernel32
@@ -78,7 +78,7 @@
     return h.hexdigest()
 
 
-class EmptyValue(unicode):
+class EmptyValue(str):
     """A dummy type that behaves like an empty string and sequence.
 
     This type exists in order to support
@@ -92,7 +92,7 @@
 class ReadOnlyNamespace(object):
     """A class for objects with immutable attributes set at initialization."""
     def __init__(self, **kwargs):
-        for k, v in kwargs.iteritems():
+        for k, v in kwargs.items():
             super(ReadOnlyNamespace, self).__setattr__(k, v)
 
     def __delattr__(self, key):
@@ -224,7 +224,7 @@
         self.mode = mode
 
     def write(self, buf):
-        if isinstance(buf, unicode):
+        if isinstance(buf, str):
             buf = buf.encode('utf-8')
         BytesIO.write(self, buf)
 
@@ -384,7 +384,7 @@
     def __add__(self, other):
         # Allow None and EmptyValue is a special case because it makes undefined
         # variable references in moz.build behave better.
-        other = [] if isinstance(other, (types.NoneType, EmptyValue)) else other
+        other = [] if isinstance(other, (type(None), EmptyValue)) else other
         if not isinstance(other, list):
             raise ValueError('Only lists can be appended to lists.')
 
@@ -393,7 +393,7 @@
         return new_list
 
     def __iadd__(self, other):
-        other = [] if isinstance(other, (types.NoneType, EmptyValue)) else other
+        other = [] if isinstance(other, (type(None), EmptyValue)) else other
         if not isinstance(other, list):
             raise ValueError('Only lists can be appended to lists.')
 
@@ -564,14 +564,14 @@
     functions below.
     """
     assert isinstance(flags, dict)
-    assert all(isinstance(v, type) for v in flags.values())
+    assert all(isinstance(v, type) for v in list(flags.values()))
 
     class Flags(object):
-        __slots__ = flags.keys()
+        __slots__ = list(flags.keys())
         _flags = flags
 
         def update(self, **kwargs):
-            for k, v in kwargs.iteritems():
+            for k, v in kwargs.items():
                 setattr(self, k, v)
 
         def __getattr__(self, name):
@@ -1102,14 +1102,14 @@
     # issue.  So we do a little dance to filter it out ourselves.
     dummy_fill_value = ("dummy",)
     def filter_out_dummy(iterable):
-        return itertools.ifilter(lambda x: x != dummy_fill_value,
+        return filter(lambda x: x != dummy_fill_value,
                                  iterable)
 
     # From the itertools documentation, slightly modified:
     def grouper(n, iterable):
         "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"
         args = [iter(iterable)] * n
-        return itertools.izip_longest(fillvalue=dummy_fill_value, *args)
+        return itertools.zip_longest(fillvalue=dummy_fill_value, *args)
 
     for i, unified_group in enumerate(grouper(files_per_unified_file,
                                               files)):
@@ -1126,7 +1126,7 @@
         [(1,2), (3,4), (5,6)]
     '''
     i = iter(iterable)
-    return itertools.izip_longest(i, i)
+    return itertools.zip_longest(i, i)
 
 
 VARIABLES_RE = re.compile('\$\((\w+)\)')
@@ -1144,7 +1144,7 @@
         value = variables.get(name)
         if not value:
             continue
-        if not isinstance(value, types.StringTypes):
+        if not isinstance(value, (str,)):
             value = ' '.join(value)
         result += value
     return result
@@ -1171,7 +1171,7 @@
     pass
 
 
-class EnumString(unicode):
+class EnumString(str):
     '''A string type that only can have a limited set of values, similarly to
     an Enum, and can only be compared against that set of values.
 
@@ -1207,19 +1207,18 @@
     # quoting could be done with either ' or ".
     if c == "'":
         return "\\'"
-    return unicode(c.encode('unicode_escape'))
+    return str(c.encode('unicode_escape'))
 
 # Mapping table between raw characters below \x80 and their escaped
 # counterpart, when they differ
 _INDENTED_REPR_TABLE = {
     c: e
-    for c, e in map(lambda x: (x, _escape_char(x)),
-                    map(unichr, range(128)))
+    for c, e in [(x, _escape_char(x)) for x in list(map(chr, list(range(128))))]
     if c != e
 }
 # Regexp matching all characters to escape.
 _INDENTED_REPR_RE = re.compile(
-    '([' + ''.join(_INDENTED_REPR_TABLE.values()) + ']+)')
+    '([' + ''.join(list(_INDENTED_REPR_TABLE.values())) + ']+)')
 
 
 def indented_repr(o, indent=4):
@@ -1245,7 +1244,7 @@
         elif isinstance(o, bytes):
             yield 'b'
             yield repr(o)
-        elif isinstance(o, unicode):
+        elif isinstance(o, str):
             yield "'"
             # We want a readable string (non escaped unicode), but some
             # special characters need escaping (e.g. \n, \t, etc.)
@@ -1275,11 +1274,11 @@
     if isinstance(obj, dict):
         return {
             encode(k, encoding): encode(v, encoding)
-            for k, v in obj.iteritems()
+            for k, v in obj.items()
         }
     if isinstance(obj, bytes):
         return obj
-    if isinstance(obj, unicode):
+    if isinstance(obj, str):
         return obj.encode(encoding)
     if isinstance(obj, Iterable):
         return [encode(i, encoding) for i in obj]
Binary files mozjs-68.4.2/python/mozbuild/mozbuild/util.pyc and mozjs-68.4.2-patch/python/mozbuild/mozbuild/util.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozbuild/virtualenv.py mozjs-68.4.2-patch/python/mozbuild/mozbuild/virtualenv.py
--- mozjs-68.4.2/python/mozbuild/mozbuild/virtualenv.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozbuild/virtualenv.py	2020-04-04 03:49:16.844870951 +0900
@@ -5,7 +5,7 @@
 # This file contains code for populating the virtualenv environment for
 # Mozilla's build system. It is typically called as part of configure.
 
-from __future__ import absolute_import, print_function, unicode_literals
+
 
 import distutils.sysconfig
 import os
@@ -495,8 +495,8 @@
         and call .ensure() and .activate() to make the virtualenv active.
         """
 
-        execfile(self.activate_path, dict(__file__=self.activate_path))
-        if isinstance(os.environ['PATH'], unicode):
+        exec(compile(open(self.activate_path, "rb").read(), self.activate_path, 'exec'), dict(__file__=self.activate_path))
+        if isinstance(os.environ['PATH'], str):
             os.environ['PATH'] = os.environ['PATH'].encode('utf-8')
 
     def install_pip_package(self, package, vendored=False):
@@ -648,7 +648,7 @@
 
     if major not in MINIMUM_PYTHON_VERSIONS or our < MINIMUM_PYTHON_VERSIONS[major]:
         log_handle.write('One of the following Python versions are required to build:\n')
-        for minver in MINIMUM_PYTHON_VERSIONS.values():
+        for minver in list(MINIMUM_PYTHON_VERSIONS.values()):
             log_handle.write('* Python %s or greater\n' % minver)
         log_handle.write('You are running Python %s.\n' % our)
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozpack/chrome/manifest.py mozjs-68.4.2-patch/python/mozbuild/mozpack/chrome/manifest.py
--- mozjs-68.4.2/python/mozbuild/mozpack/chrome/manifest.py	2020-01-18 00:46:17.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozpack/chrome/manifest.py	2020-04-04 03:49:16.990870965 +0900
@@ -2,13 +2,13 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import
+
 
 import re
 import os
 
 try:
-    from urlparse import urlparse
+    from urllib.parse import urlparse
 except ImportError:
     from urllib.parse import urlparse
 
@@ -324,7 +324,7 @@
 
 
 # All manifest classes by their type name.
-MANIFESTS_TYPES = dict([(c.type, c) for c in globals().values()
+MANIFESTS_TYPES = dict([(c.type, c) for c in list(globals().values())
                         if type(c) == type and issubclass(c, ManifestEntry)
                         and hasattr(c, 'type') and c.type])
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozpack/copier.py mozjs-68.4.2-patch/python/mozbuild/mozpack/copier.py
--- mozjs-68.4.2/python/mozbuild/mozpack/copier.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozpack/copier.py	2020-04-04 03:49:17.256870989 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import
+
 
 import os
 import stat
@@ -112,7 +112,7 @@
         '''
         Return all paths stored in the container, in the order they were added.
         '''
-        return self._files.keys()
+        return list(self._files.keys())
 
     def __len__(self):
         '''
@@ -145,7 +145,7 @@
             for path, file in registry:
                 (...)
         '''
-        return self._files.iteritems()
+        return iter(self._files.items())
 
     def required_directories(self):
         '''
@@ -154,7 +154,7 @@
         unspecified (virtual) root directory (and do not include said root
         directory).
         '''
-        return set(k for k, v in self._required_directories.items() if v > 0)
+        return set(k for k, v in list(self._required_directories.items()) if v > 0)
 
     def output_to_inputs_tree(self):
         '''
@@ -295,7 +295,7 @@
 
         Returns a FileCopyResult that details what changed.
         '''
-        assert isinstance(destination, basestring)
+        assert isinstance(destination, str)
         assert not os.path.exists(destination) or os.path.isdir(destination)
 
         result = FileCopyResult()
@@ -564,7 +564,7 @@
             def exists(self):
                 return self.deflater is not None
 
-        if isinstance(dest, basestring):
+        if isinstance(dest, str):
             dest = Dest(dest)
         assert isinstance(dest, Dest)
 
diff -ruN mozjs-68.4.2/python/mozbuild/mozpack/files.py mozjs-68.4.2-patch/python/mozbuild/mozpack/files.py
--- mozjs-68.4.2/python/mozbuild/mozpack/files.py	2020-01-18 00:46:46.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozpack/files.py	2020-04-04 03:49:17.742871034 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import
+
 
 import errno
 import inspect
@@ -63,7 +63,7 @@
 
     def _copyfile(src, dest):
         # False indicates `dest` should be overwritten if it exists already.
-        if isinstance(src, unicode) and isinstance(dest, unicode):
+        if isinstance(src, str) and isinstance(dest, str):
             _CopyFileW(src, dest, False)
         elif isinstance(src, str) and isinstance(dest, str):
             _CopyFileA(src, dest, False)
@@ -172,7 +172,7 @@
         disabled when skip_if_older is False.
         Returns whether a copy was actually performed (True) or not (False).
         '''
-        if isinstance(dest, basestring):
+        if isinstance(dest, str):
             dest = Dest(dest)
         else:
             assert isinstance(dest, Dest)
@@ -292,11 +292,11 @@
 
     def copy(self, dest, skip_if_older=True):
         real_dest = dest
-        if not isinstance(dest, basestring):
+        if not isinstance(dest, str):
             fd, dest = mkstemp()
             os.close(fd)
             os.remove(dest)
-        assert isinstance(dest, basestring)
+        assert isinstance(dest, str)
         # If File.copy didn't actually copy because dest is newer, check the
         # file sizes. If dest is smaller, it means it is already stripped and
         # elfhacked and xz_compressed, so we can skip.
@@ -335,7 +335,7 @@
         File.__init__(self, path)
 
     def copy(self, dest, skip_if_older=True):
-        assert isinstance(dest, basestring)
+        assert isinstance(dest, str)
 
         # The logic in this function is complicated by the fact that symlinks
         # aren't universally supported. So, where symlinks aren't supported, we
@@ -426,7 +426,7 @@
     '''
 
     def copy(self, dest, skip_if_older=True):
-        assert isinstance(dest, basestring)
+        assert isinstance(dest, str)
 
         if not hasattr(os, 'link'):
             return super(HardlinkFile, self).copy(
@@ -488,7 +488,7 @@
         self.required = required
 
     def copy(self, dest, skip_if_older=True):
-        if isinstance(dest, basestring):
+        if isinstance(dest, str):
             dest = Dest(dest)
         else:
             assert isinstance(dest, Dest)
@@ -535,7 +535,7 @@
         '''
         Invokes the preprocessor to create the destination file.
         '''
-        if isinstance(dest, basestring):
+        if isinstance(dest, str):
             dest = Dest(dest)
         else:
             assert isinstance(dest, Dest)
@@ -1086,7 +1086,7 @@
         from mozpack.copier import FileRegistry
         self.files = FileRegistry()
 
-        for base, finder in sorted(finders.iteritems()):
+        for base, finder in sorted(finders.items()):
             if self.files.contains(base):
                 self.files.remove(base)
             for p, f in finder.find(''):
Binary files mozjs-68.4.2/python/mozbuild/mozpack/__init__.pyc and mozjs-68.4.2-patch/python/mozbuild/mozpack/__init__.pyc differ
diff -ruN mozjs-68.4.2/python/mozbuild/mozpack/manifests.py mozjs-68.4.2-patch/python/mozbuild/mozpack/manifests.py
--- mozjs-68.4.2/python/mozbuild/mozpack/manifests.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozpack/manifests.py	2020-04-04 03:49:17.940871052 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
+
 
 from contextlib import contextmanager
 import json
diff -ruN mozjs-68.4.2/python/mozbuild/mozpack/mozjar.py mozjs-68.4.2-patch/python/mozbuild/mozpack/mozjar.py
--- mozjs-68.4.2/python/mozbuild/mozpack/mozjar.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/python/mozbuild/mozpack/mozjar.py	2020-04-04 03:49:18.295871084 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import
+
 
 from io import BytesIO
 import struct
@@ -16,6 +16,7 @@
 from collections import OrderedDict
 import mozpack.path as mozpath
 from mozbuild.util import memoize
+from functools import reduce
 
 
 JAR_STORED = ZIP_STORED
@@ -71,7 +72,7 @@
         an instance with empty fields.
         '''
         assert self.MAGIC and isinstance(self.STRUCT, OrderedDict)
-        self.size_fields = set(t for t in self.STRUCT.itervalues()
+        self.size_fields = set(t for t in self.STRUCT.values()
                                if t not in JarStruct.TYPE_MAPPING)
         self._values = {}
         if data:
@@ -93,7 +94,7 @@
         # For all fields used as other fields sizes, keep track of their value
         # separately.
         sizes = dict((t, 0) for t in self.size_fields)
-        for name, t in self.STRUCT.iteritems():
+        for name, t in self.STRUCT.items():
             if t in JarStruct.TYPE_MAPPING:
                 value, size = JarStruct.get_data(t, data[offset:])
             else:
@@ -112,7 +113,7 @@
         Initialize an instance with empty fields.
         '''
         self.signature = self.MAGIC
-        for name, t in self.STRUCT.iteritems():
+        for name, t in self.STRUCT.items():
             if name in self.size_fields:
                 continue
             self._values[name] = 0 if t in JarStruct.TYPE_MAPPING else ''
@@ -137,9 +138,9 @@
         from self.STRUCT.
         '''
         serialized = struct.pack('<I', self.signature)
-        sizes = dict((t, name) for name, t in self.STRUCT.iteritems()
+        sizes = dict((t, name) for name, t in self.STRUCT.items()
                      if t not in JarStruct.TYPE_MAPPING)
-        for name, t in self.STRUCT.iteritems():
+        for name, t in self.STRUCT.items():
             if t in JarStruct.TYPE_MAPPING:
                 format, size = JarStruct.TYPE_MAPPING[t]
                 if name in sizes:
@@ -158,7 +159,7 @@
         variable length fields.
         '''
         size = JarStruct.TYPE_MAPPING['uint32'][1]
-        for name, type in self.STRUCT.iteritems():
+        for name, type in self.STRUCT.items():
             if type in JarStruct.TYPE_MAPPING:
                 size += JarStruct.TYPE_MAPPING[type][1]
             else:
@@ -179,7 +180,7 @@
         return key in self._values
 
     def __iter__(self):
-        return self._values.iteritems()
+        return iter(self._values.items())
 
     def __repr__(self):
         return "<%s %s>" % (self.__class__.__name__,
@@ -376,7 +377,7 @@
         entries = self.entries
         if not entries:
             return JAR_STORED
-        return max(f['compression'] for f in entries.itervalues())
+        return max(f['compression'] for f in entries.values())
 
     @property
     def entries(self):
@@ -392,7 +393,7 @@
             preload = JarStruct.get_data('uint32', self._data)[0]
         entries = OrderedDict()
         offset = self._cdir_end['cdir_offset']
-        for e in xrange(self._cdir_end['cdir_entries']):
+        for e in range(self._cdir_end['cdir_entries']):
             entry = JarCdirEntry(self._data[offset:])
             offset += entry.size
             # Creator host system. 0 is MSDOS, 3 is Unix
@@ -454,7 +455,7 @@
             for file in jarReader:
                 ...
         '''
-        for entry in self.entries.itervalues():
+        for entry in self.entries.values():
             yield self._getreader(entry)
 
     def __getitem__(self, name):
@@ -548,7 +549,7 @@
         headers = {}
         preload_size = 0
         # Prepare central directory entries
-        for entry, content in self._contents.itervalues():
+        for entry, content in self._contents.values():
             header = JarLocalFileHeader()
             for name in entry.STRUCT:
                 if name in header:
@@ -563,7 +564,7 @@
         end['disk_entries'] = len(self._contents)
         end['cdir_entries'] = end['disk_entries']
         end['cdir_size'] = reduce(lambda x, y: x + y[0].size,
-                                  self._contents.values(), 0)
+                                  list(self._contents.values()), 0)
         # On optimized archives, store the preloaded size and the central
         # directory entries, followed by the first end of central directory.
         if preload_size:
@@ -571,18 +572,18 @@
             offset = end['cdir_size'] + end['cdir_offset'] + end.size
             preload_size += offset
             self._data.write(struct.pack('<I', preload_size))
-            for entry, _ in self._contents.itervalues():
+            for entry, _ in self._contents.values():
                 entry['offset'] += offset
                 self._data.write(entry.serialize())
             self._data.write(end.serialize())
         # Store local file entries followed by compressed data
-        for entry, content in self._contents.itervalues():
+        for entry, content in self._contents.values():
             self._data.write(headers[entry].serialize())
             self._data.write(content)
         # On non optimized archives, store the central directory entries.
         if not preload_size:
             end['cdir_offset'] = offset
-            for entry, _ in self._contents.itervalues():
+            for entry, _ in self._contents.values():
                 self._data.write(entry.serialize())
         # Store the end of central directory.
         self._data.write(end.serialize())
@@ -622,7 +623,7 @@
             deflater = data
         else:
             deflater = Deflater(compress, compress_level=self._compress_level)
-            if isinstance(data, basestring):
+            if isinstance(data, str):
                 deflater.write(data)
             elif hasattr(data, 'read'):
                 if hasattr(data, 'seek'):
Binary files mozjs-68.4.2/python/mozbuild/mozpack/path.pyc and mozjs-68.4.2-patch/python/mozbuild/mozpack/path.pyc differ
diff -ruN mozjs-68.4.2/testing/mozbase/manifestparser/manifestparser/ini.py mozjs-68.4.2-patch/testing/mozbase/manifestparser/manifestparser/ini.py
--- mozjs-68.4.2/testing/mozbase/manifestparser/manifestparser/ini.py	2020-01-18 00:46:50.000000000 +0900
+++ mozjs-68.4.2-patch/testing/mozbase/manifestparser/manifestparser/ini.py	2020-04-04 03:49:18.370871091 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this file,
 # You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import
+
 
 import os
 import sys
@@ -12,7 +12,7 @@
 
 class IniParseError(Exception):
     def __init__(self, fp, linenum, msg):
-        if isinstance(fp, basestring):
+        if isinstance(fp, str):
             path = fp
         elif hasattr(fp, 'name'):
             path = fp.name
@@ -43,7 +43,7 @@
     sections = []
     key = value = None
     section_names = set()
-    if isinstance(fp, basestring):
+    if isinstance(fp, str):
         fp = file(fp)
 
     # read the lines
@@ -66,7 +66,7 @@
         inline_prefixes = {p: -1 for p in comments}
         while comment_start == sys.maxsize and inline_prefixes:
             next_prefixes = {}
-            for prefix, index in inline_prefixes.items():
+            for prefix, index in list(inline_prefixes.items()):
                 index = line.find(prefix, index+1)
                 if index == -1:
                     continue
@@ -163,7 +163,7 @@
         'support-files': '%s %s',
     }
     final_mapping = global_vars.copy()
-    for field_name, value in local_vars.items():
+    for field_name, value in list(local_vars.items()):
         if field_name not in field_patterns or field_name not in global_vars:
             final_mapping[field_name] = value
             continue
diff -ruN mozjs-68.4.2/testing/mozbase/manifestparser/manifestparser/manifestparser.py mozjs-68.4.2-patch/testing/mozbase/manifestparser/manifestparser/manifestparser.py
--- mozjs-68.4.2/testing/mozbase/manifestparser/manifestparser/manifestparser.py	2020-01-18 00:46:55.000000000 +0900
+++ mozjs-68.4.2-patch/testing/mozbase/manifestparser/manifestparser/manifestparser.py	2020-04-04 03:49:18.785871129 +0900
@@ -2,9 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this file,
 # You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function
 
-from StringIO import StringIO
+
+from io import StringIO
 import json
 import fnmatch
 import os
@@ -23,7 +23,7 @@
 __all__ = ['ManifestParser', 'TestManifest', 'convert']
 
 relpath = os.path.relpath
-string = (basestring,)
+string = (str,)
 
 
 # path normalization
@@ -195,7 +195,7 @@
 
             # otherwise an item
             # apply ancestor defaults, while maintaining current file priority
-            data = dict(self._ancestor_defaults.items() + data.items())
+            data = dict(list(self._ancestor_defaults.items()) + list(data.items()))
 
             test = data
             test['name'] = section
@@ -323,19 +323,19 @@
         # make some check functions
         if inverse:
             def has_tags(test):
-                return not tags.intersection(test.keys())
+                return not tags.intersection(list(test.keys()))
 
             def dict_query(test):
-                for key, value in kwargs.items():
+                for key, value in list(kwargs.items()):
                     if test.get(key) == value:
                         return False
                 return True
         else:
             def has_tags(test):
-                return tags.issubset(test.keys())
+                return tags.issubset(list(test.keys()))
 
             def dict_query(test):
-                for key, value in kwargs.items():
+                for key, value in list(kwargs.items()):
                     if test.get(key) != value:
                         return False
                 return True
@@ -359,7 +359,7 @@
         if tests is None:
             manifests = []
             # Make sure to return all the manifests, even ones without tests.
-            for manifest in self.manifest_defaults.keys():
+            for manifest in list(self.manifest_defaults.keys()):
                 if isinstance(manifest, tuple):
                     parentmanifest, manifest = manifest
                 if manifest not in manifests:
@@ -409,7 +409,7 @@
         """
 
         files = set([])
-        if isinstance(directories, basestring):
+        if isinstance(directories, str):
             directories = [directories]
 
         # get files in directories
@@ -476,7 +476,7 @@
             print('[DEFAULT]', file=fp)
             for tag in global_tags:
                 print('%s =' % tag, file=fp)
-            for key, value in global_kwargs.items():
+            for key, value in list(global_kwargs.items()):
                 print('%s = %s' % (key, value), file=fp)
             print(file=fp)
 
@@ -602,7 +602,7 @@
         internal function to import directories
         """
 
-        if isinstance(pattern, basestring):
+        if isinstance(pattern, str):
             patterns = [pattern]
         else:
             patterns = pattern
diff -ruN mozjs-68.4.2/testing/mozbase/mozinfo/mozinfo/mozinfo.py mozjs-68.4.2-patch/testing/mozbase/mozinfo/mozinfo/mozinfo.py
--- mozjs-68.4.2/testing/mozbase/mozinfo/mozinfo/mozinfo.py	2020-01-18 00:46:55.000000000 +0900
+++ mozjs-68.4.2-patch/testing/mozbase/mozinfo/mozinfo/mozinfo.py	2020-04-04 03:49:18.951871145 +0900
@@ -8,7 +8,7 @@
 # linux) to the information; I certainly wouldn't want anyone parsing this
 # information and having behaviour depend on it
 
-from __future__ import absolute_import, print_function
+
 
 import os
 import platform
@@ -24,7 +24,7 @@
 class unknown(object):
     """marker class for unknown information"""
 
-    def __nonzero__(self):
+    def __bool__(self):
         return False
 
     def __str__(self):
@@ -197,7 +197,7 @@
     if PY3:
         string_types = str,
     else:
-        string_types = basestring,
+        string_types = str,
     if isinstance(new_info, string_types):
         # lazy import
         import mozfile
@@ -317,7 +317,7 @@
 
     # print out choices if requested
     flag = False
-    for key, value in options.__dict__.items():
+    for key, value in list(options.__dict__.items()):
         if value is True:
             print('%s choices: %s' % (key, ' '.join([str(choice)
                                                      for choice in choices[key]])))
@@ -326,7 +326,7 @@
         return
 
     # otherwise, print out all info
-    for key, value in info.items():
+    for key, value in list(info.items()):
         print('%s: %s' % (key, value))
 
 
diff -ruN mozjs-68.4.2/testing/mozbase/mozprocess/mozprocess/processhandler.py mozjs-68.4.2-patch/testing/mozbase/mozprocess/mozprocess/processhandler.py
--- mozjs-68.4.2/testing/mozbase/mozprocess/mozprocess/processhandler.py	2020-01-18 00:46:55.000000000 +0900
+++ mozjs-68.4.2-patch/testing/mozbase/mozprocess/mozprocess/processhandler.py	2020-04-04 03:49:19.421871188 +0900
@@ -2,7 +2,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this file,
 # You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, print_function
+
 
 import errno
 import os
@@ -17,7 +17,7 @@
 import time
 
 if six.PY2:
-    from Queue import Queue, Empty  # Python 2
+    from queue import Queue, Empty  # Python 2
 else:
     from queue import Queue, Empty  # Python 3
 
@@ -134,7 +134,7 @@
         def __del__(self):
             if isWin:
                 if six.PY2:
-                    _maxint = sys.maxint
+                    _maxint = sys.maxsize
                 else:
                     _maxint = sys.maxsize
                 handle = getattr(self, '_handle', None)
diff -ruN mozjs-68.4.2/third_party/python/which/which.py mozjs-68.4.2-patch/third_party/python/which/which.py
--- mozjs-68.4.2/third_party/python/which/which.py	2020-01-18 00:47:11.000000000 +0900
+++ mozjs-68.4.2-patch/third_party/python/which/which.py	2020-04-04 03:49:19.535871198 +0900
@@ -90,13 +90,13 @@
     if sys.platform.startswith('win'):
         if os.path.splitext(exeName)[1].lower() != '.exe':
             exeName += '.exe'
-        import _winreg
+        import winreg
         try:
             key = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\" +\
                   exeName
-            value = _winreg.QueryValue(_winreg.HKEY_LOCAL_MACHINE, key)
+            value = winreg.QueryValue(winreg.HKEY_LOCAL_MACHINE, key)
             registered = (value, "from HKLM\\"+key)
-        except _winreg.error:
+        except winreg.error:
             pass
         if registered and not os.path.exists(registered[0]):
             registered = None
@@ -244,7 +244,7 @@
     If no match is found for the command, a WhichError is raised.
     """
     try:
-        match = whichgen(command, path, verbose, exts).next()
+        match = next(whichgen(command, path, verbose, exts))
     except StopIteration:
         raise WhichError("Could not find '%s' on the path." % command)
     return match
@@ -281,17 +281,17 @@
     try:
         optlist, args = getopt.getopt(argv[1:], 'haVvqp:e:',
             ['help', 'all', 'version', 'verbose', 'quiet', 'path=', 'exts='])
-    except getopt.GetoptError, msg:
+    except getopt.GetoptError as msg:
         sys.stderr.write("which: error: %s. Your invocation was: %s\n"\
                          % (msg, argv))
         sys.stderr.write("Try 'which --help'.\n")
         return 1
     for opt, optarg in optlist:
         if opt in ('-h', '--help'):
-            print _cmdlnUsage
+            print(_cmdlnUsage)
             return 0
         elif opt in ('-V', '--version'):
-            print "which %s" % __version__
+            print("which %s" % __version__)
             return 0
         elif opt in ('-a', '--all'):
             all = 1
@@ -319,9 +319,9 @@
         nmatches = 0
         for match in whichgen(arg, path=altpath, verbose=verbose, exts=exts):
             if verbose:
-                print "%s (%s)" % match
+                print("%s (%s)" % match)
             else:
-                print match
+                print(match)
             nmatches += 1
             if not all:
                 break
